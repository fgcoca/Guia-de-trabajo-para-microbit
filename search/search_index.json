{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n","text":"<p>Se pretende crear una gu\u00eda para trabajar con la tarjeta micro:bit mediante:</p> <ul> <li>Programaci\u00f3n gr\u00e1fica con: Makecode, Microblocks, Scratch, ...</li> <li>Programaci\u00f3n con MicroPython</li> </ul> <p>Comienzo por mostrar las versiones de placas micro:bit de una forma breve indicando sus principales diferencias y tambi\u00e9n introduzco diferenes accesorios y shield interesantes.</p> <p>Hablar\u00e9 de la soluci\u00f3n cuando tenemos problemas de descarga de los programas por el puerto USB y tambi\u00e9n de como actualizar o reponer el firmware en la placa micro:bit</p>"},{"location":"#descripcion-grafica","title":"Descripci\u00f3n gr\u00e1fica","text":"<p>En la imagen siguiente vemos la descripci\u00f3n del hardware de la micro:bit 1.3.</p> <p> <p> Hardware micro:bit 1.3</p> <p></p> <p>En la siguiente imagen tenemos la descripci\u00f3n de hardware para la versi\u00f3n 2 que incluye importantes novedades ya que incorpora un pulsador t\u00e1ctil como sensor en el logo, un micr\u00f3fono con indicador LED, un altavoz, LED indicador de actividad USB y una LED indicador de alimentaci\u00f3n.</p> <p> <p> Hardware micro:bit 2</p> <p></p> <ul> <li>El conector microUSB nos servir\u00e1 para programar mediante la t\u00e9cnica de arrastrar y soltar, depurar mediante CMSIS-DAP y ello gracias a que integra webUSB para permitir que podamos conectar nuestra micro:bit a la web mediante el puerto USB</li> <li>Los pads con agujero permiten la conexi\u00f3n mediante pinzas de cocodrilo o conectores tipo banana.</li> <li>La antena de 2.4 GHz sirve para BLE (Bluetooth Low Energy) y transmisi\u00f3n de radio.</li> </ul>"},{"location":"#novedades-v2-y-diferencia-con-v1","title":"Novedades V2 y diferencia con V1","text":"<p>La novedad mas importante de la nueva tarjeta micro:bit V2 es que incorpora un procesador mas potente que su predecesora. Tambi\u00e9n incorpora indicador de bater\u00eda,  micr\u00f3fono, altavoz y un sensor t\u00e1ctil en el logotipo que aumentan sus posibilidades de utilizaci\u00f3n. En la imagen siguiente se se\u00f1alan los nuevos elementos.</p> <p> <p> Novedades micro:bit 2</p> <p></p> <p>Las principales diferencias con micro:bit V1 quedan descritas a continuaci\u00f3n:</p> <ul> <li> <p>El logo es un bot\u00f3n t\u00e1ctil. Se trata de un bot\u00f3n t\u00e1ctil capacitivo que nos da la posibilidad de pulsar de cuatro maneras diferentes, bot\u00f3n A, bot\u00f3n B, bot\u00f3n A y bot\u00f3n B a la vez y bot\u00f3n t\u00e1ctil.</p> </li> <li> <p>Micr\u00f3fono. Se trata de un micro digital MEMS al que se asocia un indicador LED con el icono de un micr\u00f3fono. El t\u00e9rmino MEMS, del ingl\u00e9s MicroElectroMechanical Systems, se refiere a la tecnolog\u00eda electromec\u00e1nica de dispositivos microsc\u00f3picos o sistemas microelectromec\u00e1nicos.</p> </li> <li> <p>Modo ahorro de energ\u00eda. Esta nueva funci\u00f3n de ahorro o modo de espera detendr\u00e1 el programa que se est\u00e9 ejecutando en la micro:bit hasta que se pulse el bot\u00f3n de reinicio.</p> </li> <li> <p>Altavoz. Permite incorporar sonidos a nuestros proyectos.</p> </li> </ul> <p>La microbit v2 tiene cuatro veces mas posibilidades de procesamiento y ocho veces mas memoria RAM que micro:bit V1, y esto gracias a la incorporaci\u00f3n de un procesador nRF52833 ARM Cortex de 64 MHz.</p> <p>Incorpora 512 KB de memoria Flash y 128 KB de memoria RAM.</p>"},{"location":"#hardware-microbit-v2","title":"Hardware micro:bit V2","text":"<p>En la imagen siguiente tenemos una descripci\u00f3n gr\u00e1fica de todos los elementos que integra la micro:bit v2 en sus vistas frontal y posterior.</p> <p> <p> Hardware micro:bit 2</p> <p></p>"},{"location":"#procesador-nrf52","title":"Procesador nRF52","text":"<p>Es donde se ejecutan los programas de usuario. El nRF52 proporciona todos los pines GPIO accesibles para el usuario. Hay integrado un perif\u00e9rico de radio de 2.4GHz que se utiliza para proporcionar capacidades de radio y de Bluetooth. En la tabla siguiente vemos sus principales caracter\u00edsticas.</p> <p> Item Detalles Modelo Nordic nRF52833 Variante del n\u00facleo Procesador Arm Cortex-M4 de 32 bit con FPU Memoria Flash ROM 512 KB Memoria RAM 128 KB Velocidad 64 MHz <p></p>"},{"location":"#comunicacion-inalambrica-bluetooth","title":"Comunicaci\u00f3n inal\u00e1mbrica Bluetooth","text":"<p>El dispositivo integrado de 2,4 GHz Nordic S113 admite comunicaciones Bluetooth a trav\u00e9s del dispositivo de bajo consumo (BLE), permitiendo comunicar la micro:bit con dispositivos Bluetooth como tel\u00e9fonos inteligentes y tabletas.</p> <p> Item Detalles Pila (stack) Bluetooth 5.1 con Bluetooth de bajo consumo (BLE) Banda 2.4GHz ISM (Industrial, Scientific and Medical) 2.4GHz..2.41GHz Canales 50 de 2MHz. Uitilizados del 0 al 39 Sensibilidad -93 dBm en modo BLE Potencia de transmisi\u00f3n -40 dBm a 4 dBm Perfiles BBC micro:bit profile Mas informaci\u00f3n Bluetooth <p></p>"},{"location":"#radiocomunicaciones-de-bajo-nivel","title":"Radiocomunicaciones de bajo nivel","text":"<p>El transceptor integrado de 2,4 GHz soporta una serie de est\u00e1ndares de comunicaciones por radio sobre los que est\u00e1 construido el protocolo de radio micro:bit. Este protocolo proporciona una interfaz de radio sencilla de transmisi\u00f3n de peque\u00f1os paquetes con otros dispositivos que lo admiten, como por ejemplo, otras micro:bit.</p> <p> Item Detalles Protocolo Radio micro:bit Banda de frecuencia 2.4GHz Velocidad de canal 1 Mbps o 2 Mbps Encriptaci\u00f3n Ninguna Canales 80 (0...80) C\u00f3digos de grupo 255 Potencia de transmisi\u00f3n Ocho valores configurables por el usuario, 0 (-30 dbm) a 7 (+4 dbm) Tama\u00f1o de carga 32 (est\u00e1ndar) o 255 (si se configura) Mas informaci\u00f3n Radio micro:bit <p></p>"},{"location":"#botones","title":"Botones","text":"<p>Los dos botones de la parte frontal y el bot\u00f3n de la parte posterior son botones pulsadores normales. El bot\u00f3n de la parte posterior est\u00e1 conectado al procesador de interfaz KL27 y al procesador NRF52 para reiniciar el sistema. De esta forma se garantiza que la aplicaci\u00f3n se reiniciar\u00e1 independientemente de si se alimenta desde USB o desde una bater\u00eda.</p> <p>Los botones frontales A y B se pueden programar en la aplicaci\u00f3n de usuario con cualquier prop\u00f3sito. Los rebotes de A y B se eliminan por software, y tambi\u00e9n incluyen pulsaci\u00f3n corta, pulsaci\u00f3n larga y detecci\u00f3n de pulsaci\u00f3n simultanea de A y B. Los botones funcionan en modo el\u00e9ctrico invertido t\u00edpico, donde una resistencia pull-up asegura un '1' l\u00f3gico cuando se suelta el bot\u00f3n y un '0' l\u00f3gico cuando se pulsa el bot\u00f3n. Ambos botones est\u00e1n conectados a pines GPIO que tambi\u00e9n son accesibles en el conector de borde.</p> <p> Item Detalles Tipo Dos pulsadores de usuario y un pulsador de sistema Rebotes Se eliminan por software con periodos de 54 ms Pullup Los botones A y B con resistencias externas de 4K7 y el de sistema con 10K <p></p>"},{"location":"#pantalla","title":"Pantalla","text":"<p>La pantalla es una matriz de LED de 5x5. El software en tiempo de ejecuci\u00f3n actualiza repetidamente esta matriz a alta velocidad, de modo que est\u00e1 dentro del rango de persistencia visual del usuario y no se detecta parpadeo. Esta matriz de LED tambi\u00e9n se utiliza para detectar luz ambiental.</p> <p> Item Detalles Tipo LED rojo miniatura de montaje Estructura f\u00edsica Matriz de 5x5 Estructura el\u00e9ctrica 5x5 Control de intensidad Control de hasta 255 pasos por software Sensibilidad Estimaci\u00f3n de luz ambiente por algoritmo de software Rango de sensibilidad 10 niveles, de apagado a luminosidad total Sensibilidad de color centro del rojo (700 nm) <p></p>"},{"location":"#sensor-de-movimiento","title":"Sensor de movimiento","text":"<p>La micro:bit dispone de un chip que combina aceler\u00f3metro y magnet\u00f3metro proporcionando as\u00ed detecci\u00f3n de movimiento en 3 ejes y de campo magn\u00e9tico. Incluye detecci\u00f3n de gestos en el hardware (como por ejemplo de ca\u00eddas) y detecci\u00f3n adicional de gestos (por ejemplo, logotipo arriba, logotipo abajo, agitaci\u00f3n) a trav\u00e9s de software. Un algoritmo de software en tiempo de ejecuci\u00f3n utiliza el aceler\u00f3metro integrado para convertir las lecturas en una br\u00fajula independiente de la orientaci\u00f3n de la placa. La br\u00fajula debe calibrarse antes de su uso, y el software en tiempo de ejecuci\u00f3n inicia autom\u00e1ticamente el proceso de calibraci\u00f3n. Este dispositivo est\u00e1 conectado al procesador a trav\u00e9s del bus I2C.</p> <p> Item Detalles Modelo LSM303AGR Caracter\u00edsticas 3 campos magn\u00e9ticos y aceleraci\u00f3n en e ejes. Rangos 2/4/8/16g Resoluci\u00f3n 8/10/12 bits Gestos \"on board\" Ca\u00edda libre Otros gestos Se implementan por software en tiempo de ejecuci\u00f3n <p></p>"},{"location":"#deteccion-de-temperatura","title":"Detecci\u00f3n de temperatura","text":"<p>El procesador NRF52 tiene un sensor de temperatura integrado. Este se expone por software en tiempo de ejecuci\u00f3n y proporciona una estimaci\u00f3n de la temperatura ambiente.</p> <p> Item Detalles Rango de sensibilidad -40 \u00baC ... 105 \u00baC Resoluci\u00f3n Pasos de 0.25 \u00baC Precisi\u00f3n \u00b1 5 \u00baC (sin calibrar) Mas informaci\u00f3n Term\u00f3metro DAL <p></p>"},{"location":"#altavoz","title":"Altavoz","text":"<p>Adem\u00e1s de poder emitir sonido v\u00eda PWM por los pines, la micro:bit v2 incorpora un altavoz ya montado en la placa donde se puede reproducir sonido.</p> <p> Item Detalles Tipo JIANGSU HUANENG MLT-8530 SPL (Sound Pressure Level) 80dB @ 5V, 10cm Frecuencia de resonancia propia 2700Hz Mas informaci\u00f3n Datasheet <p></p>"},{"location":"#microfono","title":"Micr\u00f3fono","text":"<p>Un micr\u00f3fono MEMS (Micro -o nano- Electrical-Mechanical System) incorporado proporciona una entrada de sonido a la micro:bit y un indicador LED integrado en la parte frontal de la placa muestra al usuario cuando est\u00e1 encendido.</p> <p> Item Detalles Tipo Knowles SPU0410LR5H-QB-7 MEMS Sensibilidad -38dB \u00b13dB @ 94dB SPL Relaci\u00f3n se\u00f1al ruido (SNR) 63dB M\u00e1xima ganancia digital (AOP) 118dB SPL Rango de frecuencia 100Hz ... 80kHz Patr\u00f3n polar Omnidireccional Mas informaci\u00f3n Datasheet <p></p>"},{"location":"#pines-gpio","title":"Pines GPIO","text":"<p>Son pines de prop\u00f3sito general de entrada/salida (General Purpose Input/Output). En el conector de borde est\u00e1n muchos de los circuitos GPIO del procesador. Algunos de estos circuitos se comparten con otras funciones de la micro:bit, pero muchos pueden reasignarse para uso de prop\u00f3sito general si se desactivan algunas funciones del software.</p> <p> Item Detalles Anillos 3 de entrada/salida y 2 de alimentaci\u00f3n compatibles con banana de 4mm y pinza de cocodrilo Funciones GPIO 19 pines asignables GPIO 2 para interfaz I2C externa 6 para la pantalla o detecci\u00f3n de luz 2 para detectar los botones de la placa 1 reservado para interfaz de accesibilidad Los 19 se pueden asignar como entrada o salida digital Los 19 pueden asignarse para hasta 3 canales PWM simult\u00e1neos Los 19 se pueden asignar para transmisi\u00f3n serie y un canal de recepci\u00f3n serie 6 pueden asignarse como entrada anal\u00f3gica 3 pueden asignarse para comunicaci\u00f3n SPI 3 se pueden asignar para hasta 3 entradas de detecci\u00f3n t\u00e1ctil Resoluci\u00f3n conversor A/D 10 bits (0...1023). 2\u00b9\u2070=1024 Distancia entre pines 1.27mm, 80 vias a doble cara <p></p>"},{"location":"#alimentacion","title":"Alimentaci\u00f3n","text":"<p>La alimentaci\u00f3n de la micro:bit puede ser a trav\u00e9s de los 5V del conector USB o mediante una bater\u00eda de 3V enchufada al conector JST. Tambi\u00e9n es posible alimentar a la micro:bit desde los anillos 3V/GND en el conector de borde. Los anillos 3V/GND se pueden usar para suministrar energ\u00eda a circuitos externos. La placa utiliza un regulador de baja ca\u00edda o LDO especificado hasta 300 mA con corte t\u00e9rmico para protecci\u00f3n contra cortocircuitos.</p> <p> Item Detalles Rango de operaci\u00f3n 1.8V ... 3.6V Consumo de corriente 300mA m\u00e1ximo Asignado a perif\u00e9erico \"on board\" 90mA Conector de bater\u00eda JST X2B-PH-SM4-TB M\u00e1xima corriente prevista para el conector de borde 190mA Mas informaci\u00f3n Power Supply <p></p>"},{"location":"#interface","title":"Interface","text":"<p>El chip de interfaz maneja la conexi\u00f3n USB y se usa para actualizar el c\u00f3digo nuevo en la micro:bit, enviar y recibir datos en serie de forma bidireccional.</p> <p> Item Detalles Modelo MKL27Z256VFM4 N\u00facleo Arm Cortex-M0+ Flash ROM 256KB (128KB reservados para uso como almacenamiento) RAM 16KB Velocidad 48MHz Depuraci\u00f3n SWD Mas informaci\u00f3n DAPLinkManual del KL27 datasheet KL27 <p></p>"},{"location":"#comunicaciones-usb","title":"Comunicaciones USB","text":"<p>La placa micro:bit tiene una pila de comunicaciones USB incorporada integrada en el firmware del chip de interface. Esta pila brinda la capacidad de arrastrar y soltar archivos en la unidad MICROBIT para cargar c\u00f3digo en el procesador. Tambi\u00e9n permite que los datos en serie se transmitan desde y hacia el procesador de micro:bit a trav\u00e9s de USB a un ordenador externo, y es compatible con el protocolo CMSIS-DAP para la depuraci\u00f3n de programas de aplicaci\u00f3n en el host.</p> <p> Item Detalles Conector USB micro, MCR-B-S-RA-SMT-CS5-TR Versi\u00f3n USB Dispositivo a velocidad completa 2.0 Velocidad 12Mbit/s Clases USB soportadas Clase de almacenamiento masivo (MSC) Clase dispositivo de comunicaciones (CDC) Mas informaci\u00f3n DAPLink <p></p>"},{"location":"#depuracion","title":"Depuraci\u00f3n","text":"<p>El procesador de interface se puede utilizar con herramientas de host especiales para depurar el c\u00f3digo que se ejecuta en el procesador de la aplicaci\u00f3n. Se conecta al procesador de aplicaciones a trav\u00e9s de 4 cables de se\u00f1al. El c\u00f3digo del procesador de la interfaz KL27 tambi\u00e9n se puede depurar a trav\u00e9s de su interfaz de depuraci\u00f3n del software SWD integral, por ejemplo, para cargar el c\u00f3digo del cargador de arranque inicial en este procesador en el momento de la fabricaci\u00f3n, o para recuperarlo si se ha perdido.</p> <p> Item Detalles Protocolo CMSIS-DAP Opciones JLink/OB (via different firmware) Mas informaci\u00f3n Mbed debugging micro:bit <p></p>"},{"location":"#mecanicos","title":"Mec\u00e1nicos","text":"<p>Hay disponibles algunos dibujos CAD 2D y 3D y modelos de la micro:bit que incluyen todas las dimensiones importantes. Estos modelos se pueden utilizar como base para generar im\u00e1genes de proyecto y marketing de micro:bit, pero tambi\u00e9n como base para la fabricaci\u00f3n precisa de accesorios, por ejemplo, mediante impresi\u00f3n 3D.</p> <p> Item Dimensiones Ancho 51,60 mm Alto 42,00 mm Profundidad 11,65 mm Altura del bot\u00f3n a la placa 4,55 mm Altura del altavoz 3 mm Conector JST 5,50 mm <p></p>"},{"location":"#conector-de-borde","title":"Conector de borde","text":"<p>Hay 25 pistas/patillas que incluyen 5 agujeros para usar con clavijas tipo banana de 4 mm o pinzas de cocodrilo. Tres de estos anillos son para entrada y salida de prop\u00f3sito general (GPIO) y tambi\u00e9n sirven para detecci\u00f3n anal\u00f3gica, PWM y t\u00e1ctil, y dos est\u00e1n conectados a la alimentaci\u00f3n de la micro:bit.</p> <p>Las pistas mas finas est\u00e1n separadas 1,27 mm, algunas son utilizadas por micro:bit y otras est\u00e1n disponibles para su uso mediante cualquiera de los conectores externos existentes.</p> <p>Solamente tienen conexi\u00f3n las pistas frontales, las posteriores est\u00e1n sin conexi\u00f3n y los anillos posteriores est\u00e1n conectados a los delanteros.</p> <p>En la imagen siguiente tenemos la descripci\u00f3n de pines de la micro:bit v2 a la izquierda y de la v1 a la derecha para poder comparar y establecer las diferencias de una forma sencilla.</p> <p> <p> Pinout micro:bit V2 y V1</p> <p></p> <p>En microbit.pinout.xyz tenemos un fant\u00e1stico recurso para obtener m\u00e1s informaci\u00f3n sobre los pines de la micro:bit y de c\u00f3mo los utilizan algunos accesorios.</p> <p>En en enlace tenemos una guia de accesorios para micro:bit</p>"},{"location":"#protectores","title":"Protectores","text":"<p>Existen en el mercado protectores para las micro:bit realizados en metacrilato transparente, silicona de distintos colores y formas y otros materiales. Estos elementos son f\u00e1ciles de encontrar en las tiendas que comercializan la placa.</p> <p>Aqu\u00ed daremos toda la informaci\u00f3n necesaria para personalizar e imprimir en 3D nuestros propios protectores.</p>"},{"location":"#microbit-v1","title":"micro:bit V1","text":"<p>Carcasa de protecci\u00f3n para la versi\u00f3n 1 de la tarjeta micro:bit basada en un dise\u00f1o de tatan.</p> <p>La base tiene el siguiente aspecto en fase de dise\u00f1o y montada:</p> <p> <p> Protector micro:bit V1</p> <p></p> <p>A continuaci\u00f3n se da el listado de ficheros de dise\u00f1o y de impresi\u00f3n 3D listos para descargar.</p> <p> Descripci\u00f3n Archivo Enlace Archivo de dise\u00f1o proteccionV1.FCStd Fuente Base en STL base.stl Base Tapa en STL tapa.stl Tapa Base STEP base.step Base Tapa STEP tapa.step Tapa <p></p>"},{"location":"#microbit-v2","title":"micro:bit V2","text":"<p>El modelo se inspira en el dise\u00f1o para microbit v1 de crozes ga\u00ebtan (tatan) y tiene el aspecto final que vemos en la animaci\u00f3n siguiente:</p> <p> <p> Partes del modelo 3D</p> <p></p> <p>En las im\u00e1genes siguientes vemos el aspecto que tiene la base por sus dos caras.</p> <p> Parte delantera de la base Parte trasera de la base <p></p> <p>En las im\u00e1genes siguientes vemos el aspecto que tiene la tapa por sus dos caras.</p> <p> Parte delantera de la tapa Parte trasera de la tapa <p></p> <p>En la tabla siguiente tenemos los archivos del proyecto listos para descargar.</p> <p> Descripci\u00f3n STL AMF STEP Base baseV2.stl baseV2.amf baseV2.step Tapa tapaV2.stl tapaV2.amf tapaV2.step <p></p> <p>Este es el enlace al archivo de dise\u00f1o en FreeCAD y este a la TTF utilizada para crear los letreros.</p> <p>El aspecto del protector una vez montado lo tenemos en la imagen siguiente.</p> <p> <p> Partes del modelo 3D</p> <p></p>"},{"location":"#enlaces","title":"Enlaces","text":"<p>Antes de poner un listado de enlaces interesantes diremos que BBC micro:bit es una placa programable de 4x5 cm de c\u00f3digo abierto que permite aprender a programar de una forma f\u00e1cil y divertida que est\u00e1 al alcance de todos.</p> <p>Dado que incorpora muchos sensores es posible realizar una cantidad importante de proyectos disponiendo solamente de la placa.</p> <p>BBC micro:bit se puede programar de muchas formas,</p> <ul> <li>De forma visual o por bloques mediante:<ul> <li>MakeCode de Microsoft, un editor gr\u00e1fico online gratuito.</li> <li>MicroBlocks, un lenguaje de programaci\u00f3n por bloques para aprender computaci\u00f3n f\u00edsica.</li> <li>Scratch (a\u00f1adiendo una extensi\u00f3n).</li> <li>Open Roberta Lab, un entorno de programaci\u00f3n en l\u00ednea para robots con el lenguaje de programaci\u00f3n gr\u00e1fico NEPO.</li> </ul> </li> <li>Mediante c\u00f3digo:<ul> <li>JavaScript, un lenguaje de programaci\u00f3n o de secuencias de comandos que permite implementar funciones complejas en p\u00e1ginas web din\u00e1micas.</li> <li>MicroPython, un peque\u00f1o pero eficiente interprete del lenguaje de programaci\u00f3n Python, optimizado para funcionar en microcontroladores.</li> <li>Python, lenguaje de programaci\u00f3n de alto nivel que no se compila, sino que se interpreta.</li> </ul> </li> </ul> <p>El c\u00f3digo interpretado necesita de un interprete, que se define como la capa l\u00f3gica de software que se pone entre el c\u00f3digo y el hardware, es decir, el interprete es el encargado de procesar el c\u00f3digo de programa y hacer posible que el hardware lo ejecute.</p> <p>Aqu\u00ed vamos a usar principalmente MakeCode, MicroBlocks y MicroPython, aunque se dar\u00e1n pinceladas con otros entornos. Tambi\u00e9n abordaremos en su momento el tema IoT utiliando la placa micro:bit.</p> <p>Enlaces muy importantes son:</p> <ul> <li>Web en ingl\u00e9s</li> <li>Web en espa\u00f1ol</li> <li>Comunidad micro:bit en espa\u00f1ol</li> <li>Github de microbit</li> <li>Comunidad de desarrollo de micro:bit. Wiki de la comunidad con informaci\u00f3n t\u00e9cnica de micro:bit.</li> <li>Editor gr\u00e1fico Makecode estable.</li> <li>Web de MicroBlocks</li> <li>Editor online de MicroBlocks</li> <li>Editor Python de micro:bit. Sencillo editor de c\u00f3digo basado en navegador.</li> <li>Mu. Sencillo editor de c\u00f3digo sin conexi\u00f3n.</li> <li>uFlash. Herramienta de l\u00ednea de comandos para mostrar secuencias de comandos de Python sin procesar en un micro:bit.</li> <li>IDLE. Un IDE de c\u00f3digo abierto multiplataforma que se instala por defecto con Python.</li> <li>BBC Micro:bit MicroPython documentation.</li> <li>Instalaci\u00f3n de Mu-editor en Linux, OSX y Window.</li> <li>Bot de programaci\u00f3n Open Roberta Lab.</li> <li>Thonny. Sencillo IDE para Python.</li> </ul>"},{"location":"configura/","title":"Configurar nuestra micro:bit","text":"<p>Para poder continuar le tenemos que decir a la micro:bit lo que queremos que haga. Esto es dar a la micro:bit una serie de instrucciones contenidas en programas. Estos programas, en el caso de micro:bit, se pueden escribir de diferentes maneras y nosotros vamos a ver fundamentalmente como hacerlo en los editores online de bloques MakeCode y MicroBlocks o Python de texto.</p> <p>Debemos disponer de un ordenador, un tel\u00e9fono o una tableta para escribir el c\u00f3digo, conectar la micro:bit a nuestro dispositivo lo que haremos de alguna de estas formas:</p> <ul> <li>Con ordenador. Es la forma mas usual y sencilla y consiste en utilizar un cable microUSB para realizar la conexi\u00f3n de la micro:bit al ordenador. Esta forma la vamos a describir de manera mas extensa a continuaci\u00f3n.</li> <li>Tel\u00e9fono o tableta. En este caso debemos utilizar Bluetooth para conectar ambos dispositivos de manera inal\u00e1mbrica. Podemos consultar mas detalles en Transferir desde la aplicaci\u00f3n m\u00f3vil, web que adem\u00e1s nos va a servir de referencia para el resto de este apartado.</li> </ul>"},{"location":"configura/#transferir-desde-ordenador","title":"Transferir desde ordenador","text":"<p>Los programas de usuario se copian en la memoria flash (no volatil) de la micro:bit por lo que a esta operaci\u00f3n se le suele conocer como flasheo. La V1 tiene 256 KB de memoria flash y la V2 512 KB</p> <p>Cuando se est\u00e1 flasheando un programa la micro:bit pausa la ejecuci\u00f3n del programa que tenga en memoria y el LED amarillo de la cara posterior estar\u00e1 parpadeando mientras se est\u00e9 copiando el nuevo programa. Una vez finalizada la copia, el nuevo programa comienza a ejecutarse en la micro:bit.</p>"},{"location":"configura/#arrastrar-y-soltar","title":"Arrastrar y soltar","text":"<p>El proceso es exactamente igual que cuando transferimos un archivo desde el ordenador a un pendrive o memoria USB y funciona en cualquier ordenador. Lo que tenemos que hacer es:</p> <ul> <li>Descargar el programa como un archivo .hex desde el editor de c\u00f3digo al ordenador, habitualmente al directorio de descargas. Finalmente se arrastra y suelta el archivo .hex en la unidad MICROBIT.</li> <li>Despu\u00e9s de transferir el archivo .hex, la unidad MICROBIT se desconectar\u00e1 y reconectar\u00e1 seg\u00fan la micro:bit se reinicia. El archivo .hex no aparecer\u00e1 en la unidad MICROBIT dado que la micro:bit no es un dispositivo de almacenamiento flash, aunque el ordenador lo muestra como tal para facilitar la transferencia de archivos .hex.</li> </ul> <p>En el enlace Transferir desde la aplicaci\u00f3n m\u00f3vil hay disponibles videos que muestran c\u00f3mo funciona este sistema. Simplemente elegimos nuestro sistema operativo (Windows, Mac, Chromebook o Linux/Raspberry Pi) y vemos el proceso.</p> <p>En la animaci\u00f3n siguiente (descarga de la web citada en el p\u00e1rrafo anterior) vemos el proceso completo en el caso de Linux.</p> <p> <p> Flasheo mediante arrastrar y soltar</p> <p></p>"},{"location":"configura/#flasheo-directo","title":"Flasheo directo","text":"<p>Se pueden enviar programas directamente desde los editores de c\u00f3digo en l\u00ednea a la micro:bit sin necesidad de descargar el archivo .hex y seguir el proceso anterior, lo que resulta f\u00e1cil y r\u00e1pido.</p> <p>El flasheo directo solamente funciona en los navegadores Chrome o Edge que soportan webUSB. Tambi\u00e9n es necesario tener actualizado el firmware de la micro:bit, especialmente si es un modelo que tiene mucho tiempo.</p> <p>IMPORTANTE: EL flasheo directo es r\u00e1pido y f\u00e1cil, y excelente para la depuraci\u00f3n, pero no SE guarda una copia deL programa en el ordenador. Si es importante mantener una copia del c\u00f3digo es preferible utilizar el m\u00e9todo de arrastrar y soltar, o en su defecto tener siempre la precauci\u00f3n de descargar el archivo .hex cuando se ha completado exit\u00f3samente el proyecto aunque durante el proceso se relicen pruebas del funcionamiento o depuraci\u00f3n del c\u00f3digo mediante este m\u00e9todo.</p> <p>En la web de referencia tenemos disponibles videos demostrativos de como se realiza el proceso.</p>"},{"location":"configura/#algunos-problemas-con-webusb","title":"Algunos problemas con WebUSB","text":"<p>La informaci\u00f3n de referencia de lo que se dice aqu\u00ed est\u00e1 en WebUSB Troubleshooting.</p> <p>Antes de nada debemos tener en cuenta todo lo indicado referente al sistema operativo, los navegadores compatibles y la versi\u00f3n de firmware requerida.</p> <p>La micro:bit nos debe aparecer en el navegador como BBC micro:bit CMSIS-DAP aunque es posible que la primera vez nos aparezca como LPC1768.</p> <p>Si nos estamos cambiando entre editores, por ejemplo MakeCode y Python, seguramente la actualizaci\u00f3n de programas mediante webUSB requiere mas tiempo del habitual ya que la micro:bit contiene un programa creado con un editor diferente.</p> <p>Si tenemos problemas cuando tenemos conectada alimentaci\u00f3n externa, procedemos a desconectar esta alimentaci\u00f3n y el cable microUSB garantizando asi el total apagado de la placa. Conectamos solamente el cable microUSB tanto a la micro:bit como al ordenador e intentamos de nuevo el flasheo. Es indiferente para esto conectar la bateria tras conectar el cable microUSB o hacerlo en otro momento.</p> <p>Si estamos en un sistema Linux y se ha instalado Chromium desde snap store, que es la tienda oficial de software de Ubuntu, no podremos acceder a dispositivos webUSB. En distribuciones como Ubuntu suele solucionar el problema declarar una regla udev. A continuaci\u00f3n se indica como hacerlo:</p> <ul> <li>Cerramos el navegador Chrome o Chormium</li> <li>Creamos un fichero 50-microbit.rules en:</li> </ul> <pre><code>/etc/udev/rules.d/50-microbit.rules\n</code></pre> <ul> <li>El contenido del fichero ser\u00e1:</li> </ul> <p>SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0d28\", MODE=\"0664\", GROUP=\"plugdev\"</p> <ul> <li>A\u00f1adimos nuestro nombre de usuario al grupo plugdev mediante:</li> </ul> <pre><code>sudo usermod -a -G plugdev &lt;nombre-usuario&gt;\n</code></pre> <ul> <li>Restablecemos las reglas udev haciendo:</li> </ul> <pre><code>sudo udevadm control --reload-rules\n</code></pre> <ul> <li>Cerramos sesi\u00f3n.</li> <li>Tras iniciar sesi\u00f3n de nuevo abrimos Chrome y lo volvemos a intentar.</li> </ul>"},{"location":"configura/#sistema-de-prueba","title":"Sistema de prueba","text":"<p>Mediante el hilo indicado en la webgrafia y utilizando la informaci\u00f3n obtenida de WebUSB Troubleshooting ha quedado resuelto el tema de utilizar webUSB con Chromium y se propone un m\u00e9todo de prueba de errores que a mi entender nos puede resultar bastante \u00fatil en un momento determinado.</p> <p>Cuando estamos teniendo problemas para grabar firmware mediante la t\u00e9cnica de arrastrar y soltar (drag &amp; drop) y/o flasheando desde la web del editor, nos resultar\u00e1 \u00fatil disponer de una colecci\u00f3n de archivos que permitan ir realizando pruebas al tiempo que llevamos la cuenta de las pruebas realizadas.</p> <p>Es Martin Williams de Micro:bit Educational Foundation quien propone el sistema y el procedimiento a seguir.</p> <ul> <li>Siempre que tengamos un error tenemos que desconectar y volver a conectar el USB antes de probar de nuevo con el mismo archivo.</li> <li>Crear un script de Python en el que podamos ir cambiando el n\u00famero de intento cuando el programa se flashea o graba correctamente.</li> </ul> <p>El script de Python propuesto lo he modificado y queda as\u00ed:</p> <pre><code># Las importaciones al principio\n\"\"\"En Python, se utiliza la palabra clave import \npara hacer que el c\u00f3digo de un m\u00f3dulo est\u00e9 \ndisponible en otro.\"\"\"\nfrom microbit import *\n\ndisplay.show(Image.HEART)\nsleep(1000)\n\n# El c\u00f3digo en'while True:' se repite indefinidamente\nwhile True:\n    display.show(0) #Contamos cambiando el valor aqu\u00ed\n    sleep(1000)\n</code></pre> <p>En el fichero 10_archivos_hex_python.zip tenemos los 10 archivos hexadecimal generados y probados. El primero de los cuales (python0-main.py) tambi\u00e9n lo tenemos en formato texto.</p> <p>En los enlaces a ficheros, en lugar de hacer clic para abrir el enlace, debemos hacer clic en el bot\u00f3n derecho y escoger 'Guardar enlace como'</p>"},{"location":"directo/","title":"Flasheo directo","text":"<p>Vamos a repetir y repasar todo lo necesario para poder grabar firmware en la micro:bit desde la p\u00e1gina web del editor que estemos utilizando mediante webUSB.</p>"},{"location":"directo/#repaso","title":"Repaso","text":"<ul> <li>Estoy trabajando con sistema operativo Ubuntu 22.04.2 LTS de 64 bits.</li> <li>Inicialmente el navegador utilizado ha sido Chromium Versi\u00f3n 114.0.5735.198 (Build oficial) snap (64 bits). Con este navegador se consigue conectar con la micro:bit desde remoto pero sin \u00e9xito en el volcado del firmware.</li> <li>El flasheo directo solamente funciona en los navegadores Chrome o Edge que soportan webUSB. Opto finalmente por utilizar Google Chrome para flashear.</li> <li>Recordemos que tambi\u00e9n es necesario tener actualizado el firmware de la micro:bit.</li> <li>Seguir los pasos descritos en el Soluci\u00f3n de problemas de WebUSB.</li> </ul> <p>Se han llevado a cabo los pasos siguientes:</p> <ul> <li>Cuando trabajamos con distribuciones Linux como Ubuntu hay que declarar una regla udev. Para hacerlo: cerramos el navegador, nos aseguramos de que existe el grupo plugdev haciendo:</li> </ul> <pre><code>getent group\n</code></pre> <ul> <li>Si no existe el grupo lo creamos con:</li> </ul> <pre><code>getent group plugdev &gt;/dev/null || sudo groupadd -r plugdev\n</code></pre> <ul> <li>Si es necesario agregamos nuestro usuario al grupo plugdev (reemplazamos \"tu-nombre-de-usuario\" con el nombre real de usuario):</li> </ul> <pre><code>sudo usermod -a -G plugdev &lt;tu-nombre-de-usuario&gt;\n</code></pre> <ul> <li>Creamos un archivo en el directorio /etc/udev/rules.d que llamaremos 50-microbit.rules haciendo:</li> </ul> <pre><code>sudo nano/etc/udev/rules.d/50-microbit.rules\n</code></pre> <ul> <li>Introducimos la l\u00ednea que vemos en la imagen.</li> </ul> <p> <p> Creaci\u00f3n regla udev</p> <p></p> <pre><code>SUBSISTEMA==\"usb\", ATTR{idVendor}==\"0d28\", MODO=\"0664\", GRUPO=\"plugdev\"\n</code></pre> <ul> <li>Reiniciamos las reglas udev</li> </ul> <pre><code>sudo udevadm control --reload-rules \n</code></pre> <ul> <li>Cerramos sesi\u00f3n o reiniciamos el sistema y ya podemos trabajar de nuevo.</li> </ul>"},{"location":"directo/#pruebas-finales","title":"Pruebas finales","text":"<p>Para comprobar que todos los cambios propuestos anteriormente se han realizado correctamente vamos a ejecutar desde una terminal los comandos siguientes:</p> <pre><code>groups\ncat /etc/udev/rules.d/50-microbit.rules\nls -l /etc/udev/rules.d\n</code></pre> <p>Como vemos en la imagen siguiente, el primer comando nos indica que el usuario est\u00e1 en el grupo requerido, el segundo nos muestra la sintaxis de la regla creada y con el tercero simplemente comprobamos que el fichero creado efectivamente est\u00e1 y adem\u00e1s en el directorio correspondiente.</p> <p> <p> Creaci\u00f3n regla udev</p> <p></p> <p>En la imagen se ha indicado la existencia del archivo de reglas udev creado con la instalaci\u00f3n del navegador Chromium, pero en este no existe ninguna regla para micro:bit y personalmente no he querido tocar el mismo.</p>"},{"location":"directo/#makecode","title":"MakeCode","text":"<p>Iniciamos el navegador Chromium o Google Chrome, este \u00faltimo preferiblemente desde un perfil sin cuenta o con una cuenta que tenga poca actividad.</p> <p>Conectamos nuestra micro:bit a un puerto USB y procedemos a emparejarla con el navegador. Si nos da alg\u00fan tipo de error debemos probar a desconectar y volver a conectar la micro:bit del USB y repetir la operaci\u00f3n.</p> <p>Para el caso de Chromium ser\u00e1 algo similar a lo siguiente:</p> <p> <p> Flasheo directo en Chromium</p> <p></p> <p>Para el caso de Chrome ser\u00e1 algo similar a lo siguiente:</p> <p> <p> Flasheo directo en Chrome</p> <p></p>"},{"location":"directo/#python","title":"Python","text":"<p>Para el caso de Chromium ser\u00e1 algo similar a lo siguiente:</p> <p> <p> Flasheo directo en Chromium</p> <p></p> <p>Para el caso de Chrome ser\u00e1 algo similar a lo siguiente:</p> <p> <p> Flasheo directo en Chrome</p> <p></p> <p>Tenemos que recordar siempre archivar nuestro trabajo.</p>"},{"location":"plantilla/","title":"Titulo","text":""},{"location":"plantilla/#t","title":"t","text":""},{"location":"plantilla/#t_1","title":"t","text":"<p> <p> xx</p> <p></p> <p>- Consejo: </p>"},{"location":"problemas/","title":"Soluci\u00f3n de problemas con descargas webUSB","text":"<p>Si estamos teniendo problemas para emparejar la micro:bit con WebUSB vamos a intentar averiguar por qu\u00e9.</p> <p>Las indicaciones van a estar basadas siempre en Ubuntu 22.04.2 LTS.</p>"},{"location":"problemas/#paso-1-comprobar-el-cable","title":"Paso 1: Comprobar el cable","text":"<p>Conectamos la placa micro:bit a un puerto USB mediante un cable microUSB. Debemos ver que se monta un dispositivo de nombrre MICROBIT y que est\u00e1 activo, como en la imagen siguiente:</p> <p> <p> Unidad MICROBIT montada</p> <p></p> <p>La forma de ver la unidad montada depender\u00e1 de nuestro sistema operativo.</p> <p>Si podemos ver la unidad MICROBIT montada podemos pasar al paso 2 y si no procedemos a:</p> <ul> <li>Asegurarnos que el cable no est\u00e1 da\u00f1ado. Podemos probarlo en otro ordenador o utilizar un cable diferente. Hay que tener presente que algunos cables comerciales solo conectan alimentaci\u00f3n y no tienen realizadas las conexiones de transmisi\u00f3n de datos.</li> <li>Probar en otro puerto USB del ordenador.</li> </ul> <p>Si podemos asegurar que el cable est\u00e1 bien pero no aparece la unidad MICROBIT, es posible que tengamos un problema con la micro:bit. Hay que probar los pasos adicionales descritos en la p\u00e1gina de b\u00fasqueda de fallos en microbit.org. Si esto tampoco nos ayuda, podemos crear un New support ticket para notificar el problema a la Fundaci\u00f3n Micro:bit y esperar obtener una respuesta. Si estamos en este caso hay que omitir el resto de pasos hasta obtener la respuesta.</p>"},{"location":"problemas/#paso-2-verificar-la-version-de-firmware","title":"Paso 2: Verificar la versi\u00f3n de firmware","text":"<p>Es posible que el firmware de la micro:bit necesite una actualizaci\u00f3n. Vamos a comprobarlo:</p> <ul> <li>Accedemos a la unidad MICROBIT montada.</li> <li>Abrimos con un editor de texto el archivo de solo lectura DETAILS.TXT.</li> <li>Comprobamos el n\u00famero que pone junto a Interface Version.</li> </ul> <p> <p> Comprobaci\u00f3n de la versi\u00f3n de firmware</p> <p></p> <p>Si la versi\u00f3n 0234, 0241 o 0243 es necesario actualizar el fimware de esa micro:.bit siguiendo el proceso que vamos a indicar en el paso 3. En la imagen anterior observamos que la versi\u00f3n del firmware es Interface Version: 0249.</p> <p>Si tenemos la versi\u00f3n 0249, 0250 o mayor trabajamos con el firmaware correcto y podemos saltar al paso 4.</p>"},{"location":"problemas/#paso-3-actualizar-firmware","title":"Paso 3: Actualizar firmware","text":"<p>Si se requiere una actualizaci\u00f3n del firmware para acceder a nuevas caracter\u00edsticas o para solucionar alg\u00fan problema, debemos proceder as\u00ed:</p> <ul> <li>Desconectar la micro:bit de cualquier tipo de alimentaci\u00f3n, ya sea por USB o por baterias.</li> <li>Con el pulsador de reset de la parte posterior accionado conectamos la micro:bit a un puerto USB y esperamos a que se monte una unidad llamada MAINTENANCE (en lugar de MICROBIT) como observamos en la figura siguiente.</li> </ul> <p> <p> Micro:bit en modo MAINTENANCE</p> <p></p> <p>La forma de ver la unidad montada depender\u00e1 de nuestro sistema operativo.</p> <ul> <li>Descargamos el archivo .hex apropiado para nuestra versi\u00f3n de micro:bit. El n\u00famero de versi\u00f3n est\u00e1 impreso en la parte inferior derecha de la cara trasera del dispositivo. Existen unas cuantas formas de distinguir que versi\u00f3n de placa tenemos.</li> </ul>"},{"location":"problemas/#identificar-el-numero-de-version","title":"Identificar el n\u00famero de versi\u00f3n","text":"<p>Actualmente hay dos versiones oficiales de BBC micro:bit, la V1 y la V2.</p> <p>Ambas versiones trabajan de la misma forma por lo que podemos continuar utilizando las versiones previas de la forma habitual.</p> <p>La primera forma de saber el n\u00famero de versi\u00f3n (V2.20, V2, V1.5, V1.3B) es mirar en la esquina inferior derecha de la cara posterior (figura siguiente). Si no podemos ver el n\u00famero es muy probable que tengamos una micro:bit 1.3 en la que el n\u00famero de versi\u00f3n serigrafiado se quedaba debajo de la pintura negra.</p> <p> <p> N\u00famero de versi\u00f3n serigrafiado</p> <p></p> <p>Como segunda forma, si en la parte posterior del dispositivo en versiones V2, veremos una etiquetara identifica MICROPHONE (MICR\u00d3FONO) y otra otra para el SPEAKER (ALTAVOZ), y adem\u00e1s la ANTENA BLE es de color dorado.</p> <p> <p> N\u00famero de versi\u00f3n seg\u00fan la antena</p> <p></p> <p>Para la tercer forma nos fijaremos en si el conector de borde tiene muescas que ser\u00e1n \u00fatiles para facilitar el uso de pinzas de cocodrilo o no dispone de dichas muescas. En la figura siguiente vemos la diferencia.</p> <p> <p> N\u00famero de versi\u00f3n seg\u00fan el conector de borde</p> <p></p> <p>y la cuarta forma es el logototipo de micro:bit en la parte frontal del dispositivo, que en la versi\u00f3n V2 es dorado como el conector de borde y adem\u00e1s es un pulsador t\u00e1ctil que se puede usar como un pin de entrada. En la figura vemos las diferencias.</p> <p> <p> N\u00famero de versi\u00f3n seg\u00fan el logotipo de micro:bit</p> <p></p>"},{"location":"problemas/#microbit-v1","title":"Micro:bit V1","text":"<p>Si tenemos una micro:bit V1 (sin altavoz ni micr\u00f3fono), todas las placas usan el mismo firmware.</p> <p> <p>Firmware para V1</p> <p></p>"},{"location":"problemas/#microbit-v2","title":"Micro:bit V2","text":"<p>Si tenemos una micro:bit V2 (con altavoz y micr\u00f3fono), existen dos posibles versiones de firmware; la V2.00 y la V2.20/2.21. Debemos seleccionar el firmware apropiado para nuestra placa.</p> <p> <p>Firmware para V2.00 --- Firmware para V2.20/2.21</p> <p></p> <ul> <li>Arrastramos y soltamos el fichero .hex que hemos descargado en la unidad montada como MAINTENANCE y esperamos a que el LED amarillo de la cara posterior deje de parpadear. Cuando la actualizaci\u00f3n se ha completado la micro:bit se resetear\u00e1, se expulsar\u00e1 del ordenador y volver\u00e1 a aparecer en modo MICROBIT.</li> <li>Finalmente debemos comprobar el archivo DETAILS.TXT para asegurarnos que la versi\u00f3n de firmware descargada se ha flsheado en el chip de interface.</li> <li>Si tenemos cualquier problema con el proceso de actualizaci\u00f3n del firmware debemos contactar con micro:bit support que es la p\u00e1gina de soporte en ingl\u00e9s.</li> <li>Todas las versiones de firmware, actuales, anteriores y beta est\u00e1n disponibles en previous firmware versions.</li> </ul>"},{"location":"problemas/#paso-4-comprobar-la-version-del-navegador","title":"Paso 4: Comprobar la versi\u00f3n del navegador","text":"<p>WebUSB es una caracter\u00edstica muy actual y puede requerir que el navegador est\u00e9 actualizado. Verifiquemos que el navegador coincida con los descritos navegadores soportados. Est\u00e1n soportados diferentes navegadores como Microsoft Edge, Google Chrome o Chromium, Mozilla Firefox y Safari para los distintos sistemas operativos y versiones.</p>"},{"location":"problemas/#paso-5-emparejar-dispositivo","title":"Paso 5: Emparejar dispositivo","text":"<p>Una vez que hemos actualizado el firmware, abrimos nuestro navegador compatible, vamos al editor que estemos utilizando para programar y procedemos a Emparejar dispositivo. Ya estamos preparados para comenzar a trabajar siguiendo los pasos iniciales que se describen en Configurar nuestra micro:bit.</p>"},{"location":"Miscelanea/about/","title":"Autor","text":"<p>Federico Coca</p> <ul> <li> <p>GitHub</p> </li> <li> <p>Twitter</p> </li> <li> <p>Instagram</p> </li> <li> <p>Mas informaci\u00f3n</p> </li> </ul>"},{"location":"Miscelanea/lic/","title":"Licencias","text":"<ul> <li> <p>Licencia MIT incluida en la creaci\u00f3n del repositorio.</p> </li> <li> <p>Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 International (\"CC BY-SA\"). CC BY-SA 4.0 </p> </li> </ul> <p> <p> </p> <p></p>"},{"location":"Miscelanea/soft/","title":"Software utilizado","text":"<ul> <li> <p>Sistema operativo: Ubuntu 22.04</p> </li> <li> <p>Paquete ofim\u00e1tico de referencia: LibreOffice</p> </li> <li> <p>Libreria Material para MkDocs</p> </li> <li> <p>Visual Studio Code</p> </li> <li> <p>Creaci\u00f3n de GIF animados para Ubuntu Peek</p> </li> <li> <p>Sistema principal de capturas de pantalla: Shutter</p> </li> <li> <p>Dibujo 2D vectorial Inkscape</p> </li> <li> <p>Retoque de im\u00e1genes GIMP</p> </li> <li> <p>Editor gr\u00e1fico Makecode estable.</p> </li> <li> <p>Editor de MicroBlocks</p> </li> <li> <p>Editor Python de micro:bit.</p> </li> <li> <p>Mu.</p> </li> <li> <p>IDLE.</p> </li> <li> <p>Thonny. Sencillo IDE para Python.</p> </li> </ul>"},{"location":"Miscelanea/webgrafia/","title":"Webgraf\u00eda y bibliograf\u00eda","text":"<ul> <li> <p>Wikipedia</p> </li> <li> <p>Web en ingl\u00e9s</p> </li> <li>Web en espa\u00f1ol</li> <li>Comunidad micro:bit en espa\u00f1ol</li> <li>Github de microbit</li> <li>Comunidad de desarrollo de micro:bit. Wiki de la comunidad con informaci\u00f3n t\u00e9cnica de micro:bit.</li> <li>Editor gr\u00e1fico Makecode estable.</li> <li>Web de MicroBlocks</li> <li>Editor online de MicroBlocks</li> <li>Editor Python de micro:bit. Sencillo editor de c\u00f3digo basado en navegador.</li> <li>Mu. Sencillo editor de c\u00f3digo sin conexi\u00f3n.</li> <li>uFlash. Herramienta de l\u00ednea de comandos para mostrar secuencias de comandos de Python sin procesar en un micro:bit.</li> <li>IDLE. Un IDE de c\u00f3digo abierto multiplataforma que se instala por defecto con Python.</li> <li>BBC Micro:bit MicroPython documentation.</li> <li>Instalaci\u00f3n de Mu-editor en Linux, OSX y Window.</li> <li>Bot de programaci\u00f3n Open Roberta Lab.</li> <li> <p>Thonny. Sencillo IDE para Python.</p> </li> <li> <p>Web Ardutaller de Francisco Soldado.</p> </li> <li> <p>MicroBlocks Wiki</p> </li> <li> <p>micro:bit Micropython API</p> </li> <li>Gu\u00eda de micro:bit paso a paso para principiantes de Bricogeek.</li> <li>Recursos sobre micro:bit de Pedro Ruiz.</li> <li> <p>Retos de Micro:bit con Python por Pedro Ruiz</p> </li> <li> <p>Consulta realizada en \u00bfC\u00f3mo podemos ayudarte? de micro:bit Help &amp; Support con el ticket 64940 referente a un error 504 con una BBC micro:bit V2.00 sobre Ubuntu 22.04.2 LTS con navegador Chromium 114.0.5735.198 version.</p> </li> </ul>"},{"location":"actividades/A01/","title":"A01. Hola mundo","text":"<p>Esta va a ser la primera actividad y vamos a indicar brevemente el procedimiento que seguiremos en esta y sucesivas.</p> <ul> <li>Introduciremos los conceptos de programaci\u00f3n para programar en BBC micro:bit MicroPython.</li> <li>Tambi\u00e9n introduciremos conceptos de micro:bit Micropython API.</li> <li>Describiremos los bloques nuevos utilizados.</li> <li>Incluiremos esquemas si resultan necesarios.</li> <li>Describiremos cualquier aspecto que se considere relevante para entender la actividad.</li> </ul> <p>La manera habitual de comenzar a programar en un nuevo lenguaje es hacer que el ordenador o dispositivo programable nos salude con un \"\u00a1Hola, mundo!\". Pues hagamos esto en los tres sistemas elegidos: MicroPython, MakeCode y MicroBlocks. Animamos a probar otros programas de los citados en la webgraf\u00eda.</p>"},{"location":"actividades/A01/#micropython","title":"MicroPython","text":"<p>Se explican los siguientes aspectos:</p> <p> <ul> <li>API: El m\u00f3dulo microbit</li> <li>API: Display que traducimos como Mostrar o pantalla</li> </ul> <p></p>"},{"location":"actividades/A01/#api-el-modulo-microbit","title":"API: El m\u00f3dulo microbit","text":"<p>Todo lo necesario para interactuar con el hardware de la micro:bit est\u00e1 en el m\u00f3dulo microbit y se recomienda su uso escribiendo al principio del programa:</p> <p> <pre><code>from microbit import *\n</code></pre> </p> <p>Las funciones disponibles directamente son:</p> <pre><code>sleep(ms) #1\nrunning_time() #2\ntemperature() #3\nscale(valor_a_convertir, from_=(min, max), to=(min, max)) #4\npanic(error_code) #5\nreset() #6\nset_volume(valor) #7 (V2)\n'''\n1 Esperar el n\u00famero de milisegundos indicado\n2 Devuelve el tiempo en ms desde la \u00faltima vez que se encendi\u00f3 la micro:bit\n3 Devuelve la temperatura en Celcius\n4 Convierte un n\u00famero de una escala de valores a otra\n5 La micro:bit entra en modo p\u00e1nico por falta de memoria y se dibuja una\ncara triste en la pantalla. El valor de error_code puede ser cualquier entero.\n6 Resetea la micro:bit\n7 Estable el volumen de salida con un *valor* entre 0 y 255\n'''\n</code></pre>"},{"location":"actividades/A01/#api-display","title":"API: Display","text":"<p>Control de la matriz de 5x5 LEDs que en micro:bit se conoce como pantalla. Los m\u00e9todos de la clase son:</p> <pre><code>display.get_pixel(x, y) #1\ndisplay.set_pixel(x, y, val) #2\ndisplay.clear() #3\ndisplay.show(image, delay=0, wait=True, loop=False, clear=False) #4\ndisplay.scroll(string, delay=400) #5\n'''\n1 Obtiene el brillo [0 (apagado) a 9 (m\u00e1x))] del pixel (x,y)\n2 Establece el brillo [0 (apagado) a 9 (m\u00e1x))] del pixel (x,y)\n3 Borra (apaga) la pantalla\n4 Muestra la imagen\n5 Desplaza una cadena por la pantalla a la velocidad en ms del *delay*\n'''\n</code></pre> <p>En ambos casos de la API existen otras muchas opciones no incluidas. La funcionalidad de autocompletar nos ayudar\u00e1 para no tener que recordar la sintaxis y conocer las que no aparece aqu\u00ed. En la animaci\u00f3n siguiente vemos un ejemplo de ambos casos.</p> <p> <p> Autocompletar funciones y m\u00e9todos</p> <p></p>"},{"location":"actividades/A01/#programa","title":"Programa","text":"<p>El programa de la actividad lo vamos a hacer utilizando algunas de las cosas descritas y comentando las l\u00edneas para que se entienda mejor. El c\u00f3digo del programa es el siguiente:</p> <pre><code># Las importaciones van a la cabeza\nfrom microbit import * #Usar todo de la biblioteca microbit\ndisplay.clear() #Borra pantalla\ndisplay.scroll('\u00a1Hola Mundo!', delay=100) #Desplaza el texto por pantalla\nsleep(1000) #Espera 1s\ndisplay.show(Image.HAPPY) #Muestra carita alegre\nsleep(1000)\ndisplay.clear()\ndisplay.set_pixel(0,0,3) #Encendemos pixel al brillo establecido\ndisplay.set_pixel(2,2,9)\ndisplay.set_pixel(4,0,3)\n</code></pre> <p>En la animaci\u00f3n vemos el funcionamiento en el simulador y el efecto de cambiar el valor del delay y del valor del brillo de uno de los LED.</p> <p> <p> Funcionamiento del programa</p> <p></p> <p>Si observamos bien, al principio del texto aparecen unas interrogaciones en lugar de el signo de abrir admiraci\u00f3n. Esto es debido a que micro:bit no muestra caracteres especiales como \u00a1, \u00bf, \u00f1, acentos, etc.</p> <p>El programa lo podemos descargar de:</p> <ul> <li>A01-Hola_Mundo-main en hexadecimal</li> <li>A01-Hola_Mundo-main en Python</li> </ul>"},{"location":"actividades/A01/#makecode","title":"MakeCode","text":"<p>Se explican los bloques utilizados de los men\u00fas de bloques. Referencia a micro:bit reference The micro:bit APIs.</p> <p> <ul> <li>B\u00e1sico: Funcionalidades b\u00e1sicas de micro:bit</li> <li>LED: Control de la pantalla LED</li> </ul> <p></p>"},{"location":"actividades/A01/#basico","title":"B\u00e1sico","text":"<p>En este grupo tenemos acceso a la funcionalidad b\u00e1sica de la micro:bit.</p> <ul> <li>al iniciar. Se trata del bloque de la imagen y es un bloque que se ejecuta una sola vez cuando se inicia la micro:bit. Es uno de los dos bloques que aparecen al principio cuando escogemos Restablecer o creamos un nuevo proyecto desde Mis proyectos.</li> </ul> <p> <p> Bloque 'al iniciar'</p> <p></p> <ul> <li>para siempre. Se trata del bloque de la imagen y es un bloque que se ejecuta de manera infinita. Es el otro de los dos bloques que aparecen al principio cuando escogemos Restablecer o creamos un nuevo proyecto desde Mis proyectos.</li> </ul> <p> <p> Bloque 'para siempre'</p> <p></p> <ul> <li>mostrar cadena. Muestra la cadena de texto en la pantalla caracter a caracter. En la imagen la palabra es Hello.</li> </ul> <p> <p> Bloque 'mostrar cadena'</p> <p></p> <ul> <li>mostrar icono. Dibuja el icono seleccionado en la pantalla.</li> </ul> <p> <p> Bloque 'mostrar icono'</p> <p></p> <ul> <li>borrar la pantalla. Apaga todos los LEDs.</li> </ul> <p> <p> Bloque 'borrar la pantalla'</p> <p></p> <ul> <li>pausa (ms). Detiene la ejecuci\u00f3n del programa el tiempo establecido en milisegundos.</li> </ul> <p> <p> Bloque 'pausa (ms)'</p> <p></p>"},{"location":"actividades/A01/#led","title":"LED","text":"<p>Control de la pantalla LED.</p> <ul> <li>ajustar brillo. Configura el brillo de la pantalla desde 0 (apagada) a 255 (m\u00e1ximo brillo). Los bloques de pantalla posteriores a este tendr\u00e1n el brillo establecido hasta que no se cambien el valor a otro distinto.</li> </ul> <p> <p> Bloque 'ajustar brillo'</p> <p></p> <ul> <li>graficar x,y,brillo. Enciende el LED indicado en la coordenada x,y con el brillo especificado. La coordenadas x es la horizontal y la y es la vertical. La coordenada 0,0 es la esquina superior ezquierda, la 0,4 es la derecha, la 4,0 es la inferior izquierda y la 4,4 la inferior derecha.</li> </ul> <p> <p> Bloque 'graficar x,y,brillo'</p> <p></p>"},{"location":"actividades/A01/#programa_1","title":"Programa","text":"<p>El programa de la actividad lo vamos a hacer utilizando los bloques descritos y comentando algunas de las l\u00edneas para que se entienda mejor. El programa es el siguiente:</p> <p> <p> Programa de la actividad A01 en MakeCode</p> <p></p> <p>En la animaci\u00f3n vemos el funcionamiento en el simulador.</p> <p> <p> Funcionamiento del programa</p> <p></p> <p>El programa lo podemos descargar de:</p> <ul> <li>A01-Hola_Mundo-main en hexadecimal</li> </ul>"},{"location":"actividades/A01/#microblocks","title":"MicroBlocks","text":"<p>Se explican los bloques utilizados de los men\u00fas de bloques por defecto y de la libreria a\u00f1adida. Referencia a Blocks Reference.</p> <p> <ul> <li>Control</li> <li>Pantalla LED</li> </ul> <p></p>"},{"location":"actividades/A01/#control","title":"Control","text":"<p>En este grupo tenemos acceso a los bloques de control de la micro:bit.</p> <ul> <li>al empezar. Los bloques debajo de este se ejecutan cuando se enciende la placa o cuando se hace clic en el icono verde EJECUTAR que tiene forma de flecha.</li> </ul> <p> <p> Bloque 'al empezar'</p> <p></p> <ul> <li>por siempre. Se trata del bloque de la imagen y es un bloque que se ejecuta de manera indefinida.</li> </ul> <p> <p> Bloque 'por siempre'</p> <p></p> <ul> <li>espera xx milisegundos. Espera el n\u00famero de milisegundos indicado antes de continuar.</li> </ul> <p> <p> Bloque 'espera xx milisegundos'</p> <p></p>"},{"location":"actividades/A01/#pantalla-led","title":"Pantalla LED","text":"<p>Libreria con los bloques de control de la pantalla LED.</p> <ul> <li>limpia pantalla. Apaga todos los LEDs.</li> </ul> <p> <p> Bloque 'limpia pantalla'</p> <p></p> <ul> <li>pantalla. Muestra una imagen de la pantalla que permite cambiar el estado de cada LED haciendo clic sobre el mismo.</li> </ul> <p> <p> Bloque 'pantalla'</p> <p></p> <ul> <li>anima el texto. Muestra el texto introducido mediante desplazamiento caracter a caracter con el retardo en milisegundos que establezcamos.</li> </ul> <p> <p> Bloque 'anima el texto'</p> <p></p> <ul> <li>enciende x,y. Enciende el LED indicado en la coordenada x,y. La coordenadas x es la horizontal y la y es la vertical. La coordenada 1,1 es la esquina superior ezquierda, la 1,5 es la derecha, la 5,1 es la inferior izquierda y la 5,5 la inferior derecha.</li> </ul> <p> <p> Bloque 'enciende x,y'</p> <p></p>"},{"location":"actividades/A01/#programa_2","title":"Programa","text":"<p>El programa de la actividad lo vamos a hacer utilizando los bloques descritos. El programa es el siguiente:</p> <p> <p> Programa de la actividad A01 en MicroBlocks</p> <p></p> <p>En el caso de MicroBlocks no disponemos de simulador pero los botones Iniciar/parar nos permiten estar viendo en la placa real todo lo que ocurre mientra elaboramos nuestro programa.</p> <p>El programa lo podemos descargar de:</p> <ul> <li>A01-Hola_Mundo.ubp</li> </ul>"},{"location":"actividades/A02/","title":"A02. Im\u00e1genes","text":"<p>Vamos a entrar en las posibilidades art\u00edsticas que nos puede ofrecer una matriz cuadrada de 5x5 LEDs.</p>"},{"location":"actividades/A02/#micropython","title":"MicroPython","text":"<p>MicroPython nos ofrece muchas im\u00e1genes integradas para mostrar por pantalla y podemos crear efectos interesantes. Mediante la caracter\u00edstica de autocompletar se nos van a mostrar todas las definidas que est\u00e1n listadas en la documentaci\u00f3n oficial. Ya hemos visto como cargar una imagen, lo que puedo aconsejar en este momento es realizar el ejercicio de mostrar cada una de las disponibles para familiarizarnos con ellas.</p> <p>Es perfectamente posible crar nuestras propias im\u00e1genes configurando cada Pixel o LED de la pantalla.</p> <p>Tambi\u00e9n es posible crear animaciones con im\u00e1genes.</p> <p>Se explican los siguientes aspectos:</p> <p> <ul> <li>Im\u00e1genes DIY</li> <li>Animar im\u00e1genes</li> </ul> <p></p>"},{"location":"actividades/A02/#imagenes-diy","title":"Im\u00e1genes DIY","text":"<p>Crear nuestras propias im\u00e1genes va a resultar una tarea sencilla cuando conozcamos la informaci\u00f3n para hacerlo. </p>"},{"location":"actividades/A02/#makecode","title":"MakeCode","text":""},{"location":"actividades/A02/#microblocks","title":"MicroBlocks","text":""},{"location":"actividades/A02/#3","title":"3","text":"<p> <p> xx</p> <p></p>"},{"location":"guias/mblocks/","title":"Microblocks","text":"<p>Se trata de un software que puede trabajar online o localmente y que nos va a permitir programar diferentes placas, entre ellas la micro:bit.</p> <p>En el apartado Get Started de su web tenemos descrito como trabajar desde un navegador y los distintos sistemas operativos as\u00ed como los pasos a seguir para configurar nuestra placa y como comenzar a crear programas.</p> <p>En esta ocasi\u00f3n vamos a trabajar de forma local descargando e instalando el programa en nuestro ordenador. En mi caso trabajar\u00e9 con Linux de 64 bits instalando el paquete debian descargado 'ublocks-amd64.deb'. La forma elegida para instalarlo, suponiendo que el paquete est\u00e1 en Descargas, es:</p> <pre><code>sudo dpkg -i ~/Descargas/ublocks-amd64.deb\n</code></pre> <p>Tras la instalaci\u00f3n verificamos que todo est\u00e1 correcto y que Linux ve la placa ejecutando en una terminal lo que vemos en la imagen siguiente.</p> <p> <p> Verificaci\u00f3n de conexi\u00f3n con micro:bit en Linux</p> <p></p> <p>En el enlace Mis notas sobre Linux trabajando con Ubuntu tenemos un par de entradas que describen problemas con el paquete brltty (Braille TTY). En el caso de placas con un chip microcontrolador de la serie USB CP210x, algunas de ellas compatibles con MicroBlocks. Si tenemos este caso el problema se puede resolver eliminando el paquete BRLTTY.</p> <pre><code>sudo apt remove brltty\n</code></pre> <p>El programa una vez instalado lo tenemos disponible en aplicaciones, como vemos en la imagen siguiente.</p> <p> <p> App MicroBlocks disponible</p> <p></p>"},{"location":"guias/mblocks/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>En la imagen siguiente vemos los nombres de las distintas partes que componen el editor de MicroBlocks.</p> <p> <p> Partes del editor</p> <p></p> <ul> <li>Bloques. Los bloques est\u00e1n organizados por categorias codificadas por colores. Cuando se selecciona una categor\u00eda se despliegan los correspondientes a esa categoria en la zona denominada paleta de bloques. En la wiki de MicroBlocks podemos encontrar una referencia completa a los bloques (Block Reference) con multitud de ejemplos resueltos.</li> <li>Barra de men\u00fas. Contiene, de izquierda a derecha, el icono en forma de globo terraqueo para configurar el idioma, la rueda dentada para entrar en opciones de MicroBlocks, la hoja de papel que muestra el men\u00fa archivo, el gr\u00e1fico es un men\u00fa con opciones de graficar y conectar y el conector USB para el men\u00fa conectar.</li> <li>Nombre del proyecto. Es el nombre del proyecto actual.</li> <li>Botones de inicio/parada. Son dos iconos que sirven para controlar la ejecuci\u00f3n de los programas.</li> <li>Librerias. Aqu\u00ed se muestran las diversas bibliotecas que se cargan seg\u00fan sea requerido.</li> <li>\u00c1rea de bloques de programa. Es donde se crea el programa o script de usuario y las funciones, que en MicroBlocks se conocen como bloques personalizados.</li> <li>Barra de informaci\u00f3n. Si vamos moviendo el rat\u00f3n por los diversos bloques y \u00e1reas del IDE en esta barra se muestra el tipo de bloque y una breve informaci\u00f3n de ayuda sobre los bloques; as\u00ed como la funcionalidad de las distintas \u00e1reas. La informaci\u00f3n detallada del bloque est\u00e1 disponible a trav\u00e9s del men\u00fa contextual de cada bloque.</li> <li>Controles tama\u00f1o bloques. Estos tres controles permiten cambiar el tama\u00f1o de los bloques aumentando (+) o disminuyendo (-), as\u00ed como establecerlos en el tama\u00f1o predeterminado o del 100% de zoom (=).</li> </ul>"},{"location":"guias/mblocks/#idioma","title":"Idioma","text":"<p>En la imagen siguiente vemos el men\u00fa desplegado.</p> <p> <p> Idioma</p> <p></p> <p>Simplemente tenemos que seleccionar el idioma deseado de entre los que est\u00e1 traducido MicroBlocks. Esto configura todos los men\u00fas, mensajes y bloques de c\u00f3digo en ese idioma. La operaci\u00f3n puede demorarse unos segundos dependiendo del equipo en el que se est\u00e9 ejecutando el programa.</p>"},{"location":"guias/mblocks/#microblocks_1","title":"MicroBlocks","text":"<p>En la figura siguiente vemos este men\u00fa desplegado.</p> <p> <p> MicroBlocks</p> <p></p> <ul> <li>La opci\u00f3n 'acerca de...' nos muestra la informaci\u00f3n sobre MicroBlocks que vemos en la imagen siguiente.</li> </ul> <p> <p> acerca de...</p> <p></p> <ul> <li>Actualizar el firmware de la placa es lo que permite al usuario cargar la \u00faltima versi\u00f3n del firmware en la placa conectada. Dependiendo de los dispositivos conectados y de las condiciones se puede desplegar un men\u00fa para seleccionar el dispositivo concreto. Es la opci\u00f3n que utilizaremos para grabar los programas en la placa.</li> <li>Mostrar bloques avanzados modifica el men\u00fa MicroBlocks mostrando mas opciones, como vemos en la imagen siguiente.</li> </ul> <p> <p> Bloques avanzados</p> <p></p> <ul> <li>La opci\u00f3n versi\u00f3n de firmware nos devuelve la versi\u00f3n de firmware de la m\u00e1quina virtual para micro:bit, como vemos en la imagen siguiente.</li> </ul> <p> <p> versi\u00f3n de firmware</p> <p></p> <ul> <li>La opci\u00f3n borra y reparticiona el firmware en placa ESP borra totalmente el contenido de la memoria y carga el programa actual en placas con capacidad EiFi tipo ESP.</li> <li>La opci\u00f3n inicia el servidor HTTP. Activa (o desactiva si est\u00e1 activo) el servidor HTTP de MicroBlocks en el puerto por defecto 6473, aunque este puede ser cambiado.</li> <li>La opci\u00f3n desactiva autocarga de librerias de placa permite desabilitar la funcionalidad de MicroBlocks de que intente autom\u00e1ticamente complementar las funcionalidades b\u00e1sicas del dispositivo conectado cargando varias bibliotecas.</li> <li>La opci\u00f3n activar PlugShare en proyecto en blanco es una funci\u00f3n que si est\u00e1 habilitada hace que el editor de MicroBlocks cargue autom\u00e1ticamente un proyecto desde el microdispositivo conectado, siempre que no haya un proyecto cargado en el editor. Si el \u00edcono de conexi\u00f3n no es verde y est\u00e1 habilitado PlugShare cuando estamos en un proyecto vac\u00edo, tan pronto como se establezca la conexi\u00f3n USB, MicroBlocks leer\u00e1 y cargar\u00e1 el proyecto que contiene el dispositivo conectado.</li> <li>La opci\u00f3n oculta los bloques avanzados devuelve al men\u00fa MicroBlocks a su estado por defecto, que es la opci\u00f3n mas habitual.</li> </ul>"},{"location":"guias/mblocks/#archivo","title":"Archivo","text":"<p>En la figura siguiente vemos este men\u00fa desplegado.</p> <p> <p> Archivo</p> <p></p> <ul> <li>Guarda. Cuando demos por finalizado un proyecto, o tengamos que dejarlo para otro momento sin perder el trabajo realizado, debemos guardarlo en el ordenador. Se nos abrir\u00e1 una ventana como la de la imagen siguiente.</li> </ul> <p> <p> Guarda fichero</p> <p></p> <ul> <li>Nuevo. Para crear nuevos proyectos. Si tenemos un programa cargado en el \u00e1rea de trabajo del editor, mostrar\u00e1 un mensaje solicitando confirmaci\u00f3n para eliminar del editor el proyecto activo. En la imagen siguiente vemos el mensaje.</li> </ul> <p> <p> Confirmacion</p> <p></p> <p>Si la contestaci\u00f3n es 'Si' el \u00e1rea de trabajo queda vac\u00eda y las bibliotecas a\u00f1adidas por el usuario se borran.</p> <ul> <li>Abre. Esta opci\u00f3n permite cargar en el editor proyectos .ubp previamente guardados. Si hay un proyecto cargado en el \u00e1rea de trabajo, se mostrar\u00e1 un mensaje de confirmaci\u00f3n (igual que en Nuevo) y se presenta una ventana de di\u00e1logo que permite localizar y abrir el archivo deseado. En la imagen siguiente vemos esta ventana.</li> </ul> <p> <p> Di\u00e1logo abrir fichero</p> <p></p> <p>En la categor\u00eda Ejemplos es donde se presentan muchos proyectos de MicroBlocks para diferentes microdispositivos y opciones de hardware.</p> <ul> <li>Copia URL del proyecto al portapapeles. Cuando trabajamos online permite compartir el proyecto.</li> </ul>"},{"location":"guias/mblocks/#conectar","title":"Conectar","text":"<p>En la figura siguiente vemos este men\u00fa desplegado. En esta ocasi\u00f3n hay un dispositivo ya conectado y por eso se muestra la opci\u00f3n disconnect (/dev/ttyACM0).</p> <p> <p> Conectar</p> <p></p> <p>Si tenemos varios dispositivos conectados a puertos USB se nos mostrar\u00e1n los mismos para que podamos escoger el dispositivo que nos interesa. Al seleccionar uno y hacer clic en Conectar se establecer\u00e1 una conexi\u00f3n con el dispositivo correspondiente. Si la conexi\u00f3n tiene \u00e9xito, el \u00edcono USB cambiar\u00e1 a uno con un fondo circular verde, como vemos en la imagen siguiente.</p> <p> <p> Conectado</p> <p></p> <p>Es importante prestar atenci\u00f3n al estado de este icono. MicroBlocks ejecuta muchos procesos internos automatizados y la actualizaci\u00f3n y sincronizaci\u00f3n autom\u00e1tica del c\u00f3digo del proyecto en el dispositivo conectado es uno de ellos, pero esto solo es posible cuando el \u00edcono est\u00e1 en modo verde.</p> <p>Existen diversas razones por las que la conexi\u00f3n puede interrumpirse. Cuando esto ocurre el icono dejar\u00e1 de estar verde y debemos buscar el motivo de la desconexi\u00f3n.</p>"},{"location":"guias/mblocks/#botones-de-inicioparada","title":"Botones de inicio/parada","text":"<p>MicroBlocks siempre est\u00e1 en conexi\u00f3n; se puede hacer clic en bloques o secuencias de comandos individuales para ejecutarlos sin hacer clic en el bot\u00f3n de 'Inicio'.</p> <p>La funci\u00f3n principal del bot\u00f3n 'Inicio' es simular el encendido del dispositivo iniciando todas las secuencias de comandos.</p> <p>El bot\u00f3n 'STOP' detiene la ejecuci\u00f3n del proyecto. Todas las variables son desasignadas. Todos los scripts se detienen.</p> <p>El proyecto cargado en el dispositivo estar\u00e1 en el mismo hasta nueva grabaci\u00f3n de firmware. De hecho, podemos desconectarlo, encenderlo desde una fuente externa y ejecutar el proyecto sin el editor.</p>"},{"location":"guias/mblocks/#programando","title":"Programando","text":"<p>Dado que es la parte en la que mas se trabaja, la creaci\u00f3n de programas, la vemos en su propio apartado.</p> <p>Los bloques colocados en el \u00e1rea de trabajo los podemos mover a voluntad con el rat\u00f3n, as\u00ed como con los men\u00fas contextuales que aparecen al pulsar el bot\u00f3n derecho. Existen una serie de atajos asociados a las teclas Ctrl y Shift que se ir\u00e1n viendo.</p>"},{"location":"guias/mblocks/#arrastrar-y-soltar","title":"Arrastrar y soltar","text":"<p>El movimiento de arrastrar y soltar es el habitual de entornos de programaci\u00f3n por bloques y adem\u00e1s resulta muy intuitivo. Lo nuevo en Microblocks es que mientras se arrastra aparece una sombra paralela que pretende crear un efecto 3D de que el bloque en movimiento va flotando sobre el \u00e1rea de trabajo, incluso por encima del resto de bloques.</p> <p> <p> Sombra paralela</p> <p></p>"},{"location":"guias/mblocks/#acoplar-bloques","title":"Acoplar bloques","text":"<p>Cuando nos acercamos con un bloque o un conjunto de bloques a otro u otros bloques, aparecer\u00e1 una l\u00ednea blanca blanca horizontal que designa un punto de acople.</p> <p> <p> L\u00ednea blanca mostrando punto de acople</p> <p></p> <p>Si soltamos el bot\u00f3n del rat\u00f3n cuando se ve esa l\u00ednea blanca el bloque o bloques se acoplar\u00e1n a los del otro lado de la l\u00ednea.</p>"},{"location":"guias/mblocks/#menu-contextual-de-bloques","title":"Men\u00fa contextual de bloques","text":"<p>Si situamos el cursor sobre un bloque que est\u00e1 en un grupo de bloques y hacemos clic con el bot\u00f3n secundario o derecho, nos aparece un men\u00fa contextual.</p> <p> <p> Men\u00fa contextual en bloques</p> <p></p> <p>Este men\u00fa contextual ofrece mas opciones si hemos seleccionado 'Mostrar bloques avanzados'.</p> <p> <p> Men\u00fa contextual en bloques avanzados</p> <p></p>"},{"location":"guias/mblocks/#menu-contextual-de-area-de-trabajo","title":"Men\u00fa contextual de \u00e1rea de trabajo","text":"<p>Es el men\u00fa contextual que aparece cuando hacemos un clic derecho sobre cualquier zona vac\u00eda del \u00e1rea de trabajo.</p> <p> <p> Men\u00fa contextual en \u00e1rea de trabajo</p> <p></p> <ul> <li>tama\u00f1o de bloques. Cuando se selecciona nos muestra una lista con porcentajes para escoger est\u00e1ndo tildado el valor actual.</li> <li>deshaz el \u00faltimo movimiento. Invierte el \u00faltimo movimiento de bloque completado.</li> <li>limpia. Organiza los conjuntos y los bloques sueltos en la pantalla en una disposici\u00f3n de arriba hacia abajo y de izquierda a derecha desde el lado izquierdo del \u00e1rea de trabajo. Los bloques se organizan en m\u00faltiples columnas determinadas por el ancho del \u00e1rea IDE. \u00a1Esta operaci\u00f3n no se puede deshacer!</li> <li>copia todos los programas al portapapeles. Es la pareja de copiar al portapapeles. Mientras que el primero solamente copia el bloque o el programa, este copia todos los programas del proyecto.</li> <li>copia todos los programas al portapapeles como URL. Es lo mismo que el visto anteriormente.</li> <li>guarda una imagen de todos los programas visibles. Es la versi\u00f3n complementaria de la vista en el men\u00fa contextual de bloques.</li> <li>fija la escala de la imagen a exportar. Al seleccionarla nos muestra una lista con porcentajes para escoger est\u00e1ndo tildado el valor actual.</li> </ul>"},{"location":"guias/mblocks/#crear-un-programa","title":"Crear un programa","text":"<p>Por defecto, al iniciar Microblocks aunque se haga con la micro:bit conectada, no tendremos disponibles los bloques de manejo de la pantalla de 5x5 LEDs. Estos bloques se encuentran en la libreria 'Pantalla LED' que debemos a\u00f1adir a nuestro programa. Desde 'Control debemos situar los bloques 'al empezar' y 'por siempre'.</p> <p>Repetimos el 'Primer proyecto' en el que vamos a utilizar, adem\u00e1s de los dos nombrados, el 'limpia pantalla' y 'muestra car\u00e1cter'. En la animaci\u00f3n siguiente vemos el proceso y la simulaci\u00f3n.</p> <p> <p> Primer proyecto</p> <p></p> <p>Podemos observar que tras unos instantes el programa comienza a ejecutarse en la micro:bit conectada. En el caso de Microblocks el bloque usado solamente permite un car\u00e1cter y no crea la animaci\u00f3n si ponemos mas de uno. Para hacer esto tenemos disponible otro bloque.</p> <p>Ya tenemos creado el programa y comprobado que funciona, es hora de salvarlo en el ordenador. Esto lo haremos asi principalmente para tener disponibles todos los programas y poder enlazarlos donde convenga en estas notas. En la animaci\u00f3n siguiente vemos el proceso de descarga del archivo.</p> <p> <p> Descarga del archivo Primer-proyecto.ubp</p> <p></p> <p>El Primer proyecto lo podemos descargar desde este enlace.</p> <p>Durante el proceso de cambios en el programa podemos comprobar que el conjunto de bloques esta rodeado de una l\u00ednea verde que indica que el programa se est\u00e1 ejecutando en la micro:bit. Lo apropiado cuando vamos a realizar cambios es detener la ejecuci\u00f3n, hacer los cambios y volver a poner la ejecuci\u00f3n en marcha.</p> <p> <p> Realizando cambios</p> <p></p> <p>En la animaci\u00f3n vemos junto a los botones de inicio/parada el icono indicador de progreso de la sincronizaci\u00f3n entre el IDE y la placa.</p>"},{"location":"guias/mblocks/#enlaces-utiles","title":"Enlaces \u00fatiles","text":"<ul> <li> <p>En la web de Francisco Soldado denominada 'ardutaller' nos vamos a encontrar con una entrada MicroBlocks \u2192&gt; micro:bit donde aparece un video con detalles adicionales sobre el trabajo con esta pareja de software/hardware. En ese mismo enlace tenemos disponibles varias actividades totalmente resueltas tanto en catal\u00e1n como espa\u00f1ol.</p> </li> <li> <p>Este es el video en Youtube integrado en la web titulado Introducion al Software Microblocks. Conexi\u00f3n a Microbit</p> </li> </ul>"},{"location":"guias/mkcode/","title":"Microsoft MakeCode","text":"<p>El editor MakeCode de Microsoft es una buena forma de comenzar a programar la BBC micro:bit seg\u00fan mi criterio. Se utiliza un sistema de bloques codificados por colores que resultan f\u00e1ciles de usar y lo suficientemente potentes como para acceder a todas las funciones de la placa. Tambi\u00e9n se puede cambiar el editor a JavaScript para ver el c\u00f3digo equivalente a los bloques.</p> <p>Se puede encontrar m\u00e1s informaci\u00f3n sobre c\u00f3mo usar el editor MakeCode en las Preguntas m\u00e1s frecuentes de MakeCode.</p> <p>Lo que vamos a mostrar aqu\u00ed es una referencia de MakeCode a trav\u00e9s del editor que podemos encontrar en:</p> <p> <p> Abrir el editor online MakeCode</p> <p></p> <p>Existen versiones descargables de MakeCode, pero no para Linux.</p>"},{"location":"guias/mkcode/#primeros-pasos","title":"Primeros pasos","text":"<p>El aspecto que se nos va a mostrar al entrar en el enlace anterior es el que vemos en la imagen siguiente, que se corresponde con la parte superior de la web. Es posible la primera vez se en ingl\u00e9s pero lo podemos cambiar haciendo clic en la rueda dentada y escogiendo el idioma entrando en la primera opci\u00f3n que se muestra.</p> <p> <p> Pantalla inicial de MakeCode</p> <p></p> <p>La ventana requiere pocas explicaciones y lo primero que vamos a hacer en crear un nuevo proyecto haciendo clic en el bloque de 'Nuevo proyecto'. Para crear proyectos en la nube tendremos que loguearnos mediante una cuenta v\u00e1lida. En la animaci\u00f3n siguiente vemos como crear nuestro primer proyecto.</p> <p> <p> Primer programa en MakeCode</p> <p></p> <p>Al principio nos pide un nombre para el programa y nos ofrece la posibilidad de escoger como queremos trabajar en cuanto a c\u00f3digo se refiere. Posteriormente lanza un peque\u00f1o tutorial, que aunque est\u00e1 en ingl\u00e9s, nos explica muy claramente como trabajar con el programa.</p> <p>En la animaci\u00f3n siguiente se recorren las opciones principales que est\u00e1n disponibles cuando estamos editando un proyecto.</p> <p> <p> Ventana de edici\u00f3n de proyecto en MakeCode</p> <p></p>"},{"location":"guias/mkcode/#descripcion-de-la-ventana-de-proyecto","title":"Descripci\u00f3n de la ventana de proyecto","text":"<ul> <li>En la parte superior izquierda de la pantalla es donde est\u00e1 situado el simulador que se muestra con una imagen de una micro:bit. Se trata de una secci\u00f3n muy importante porque nos permite trabajar con la mayor parte de los programas sin necesidad de tener una placa f\u00edsica conectada, adem\u00e1s resultar \u00fatil para depurar el c\u00f3digo.</li> <li>A la derecha del simulador se sit\u00faa una columna con los bloques de programaci\u00f3n organizados por categorias. Cuando hacemos clic en una categoria se despliegan, a la derecha, los bloques mas utilizados de esa categoria. Muchas veces, debajo del nombre correspondiente a esa categoria aparece un letrero ...mas, que si se pulsa muestra el resto de bloques de la categoria. Para llevar un bloque al \u00e1rea de programaci\u00f3n basta con hacer clic sobre el mismo y arrastrarlo a la misma. En la parte superior de esta columna hay un buscador por si no recordamos muy bien donde est\u00e1 el bloque que buscamos.</li> <li>A la derecha de los bloques de programaci\u00f3n est\u00e1 la zona de programaci\u00f3n, que es donde se arrastran los bloques para crear el programa.</li> <li>Tanto en la parte superior como inferior de la pantalla tenemos enlaces a funcionalidades del programa que quedan resumidas en la imagen siguiente.</li> </ul> <p> <p> Barras de herramientas de MakeCode</p> <p></p>"},{"location":"guias/mkcode/#crear-un-programa","title":"Crear un programa","text":"<p>Por defecto, al crear un proyecto, MakeCode sit\u00faa dos bloques de eventos en el a\u0155ea de programa, 'al iniciar' y 'para siempre'. Otros bloques que permiten iniciar el programa los podemos encontrar en 'Entrada'. Esta ser\u00e1 la primera tarea a realizar en nuestro programa, decidir que evento es el que inicia el c\u00f3digo.</p> <p>El programa lo vamos creando arrastrando bloques al \u00e1rea de programaci\u00f3n y podemos ir probando el funcionamiento en el simulador. Las opciones que permiten interactuar con el simulador son dependientes de los bloques introducidos.</p> <p>Vamos a hacer algo en este 'Primer proyecto' que es el nombre que le dimos al primer programa. Simplemente vamos a utilizar dos bloques, uno va a ser 'Borrar la pantalla' y el otro 'Mostrar n\u00famero', ambos en la secci\u00f3n 'Entrada'. El primero lo vamos a poner en el bloque 'al iniciar' de manera que cada vez que se inicia la micro:bit se apaguen todos los LEDs y el segundo lo pondremos en 'para siempre' y sin modificar nada vemos como el n\u00famero 0 se muestra mientras est\u00e1 alimentada la micro:bit. En la animaci\u00f3n siguiente vemos el proceso y la simulaci\u00f3n.</p> <p> <p> Primer proyecto</p> <p></p> <p>Podemos hacer pruebas cambiando el n\u00famero e incluso entrando n\u00fameros de varias cifras para ver lo que ocurre.</p>"},{"location":"guias/mkcode/#grabar-codigo-en-la-microbit","title":"Grabar c\u00f3digo en la micro:bit","text":"<p>Aunque es posible utilizar el bot\u00f3n 'Descargar' para grabar directamente el programa en la memoria flash, el proceso que nosotros vamos a seguir siempre va a ser descargar el .hex y arrastrarlo a la unidad MICROBIT montada. Esto lo haremos asi principalmente para tener disponibles todos los programas y poder enlazarlos donde convenga en estas notas. En la animaci\u00f3n siguiente vemos el proceso de descarga del archivo.</p> <p> <p> Descarga del archivo Primer-proyecto.hex</p> <p></p> <p>El Primer proyecto lo podemos descargar desde este enlace.</p> <p>Una vez descargado el .hex y conectada la micro:bit a un puerto USB procedemos a grabar el programa en la micro:bit para comprobar que funciona exactamente igual que en la simulaci\u00f3n. El proceso lo vemos en la animaci\u00f3n siguiente.</p> <p> <p> Grabar en la micro:bit el archivo Primer-proyecto.hex</p> <p></p> <p>Durante el proceso de grabaci\u00f3n podemos comprobar el parpadeo del LED amarillo de la cara posterior y como se desmonta y monta la unidad MICROBIT reseteandose la placa.</p>"},{"location":"guias/outofthebox/","title":"Experiencia inmediata","text":"<p>Cuando abrimos y conectamos una micro:bit nueva, se ejecuta un programa de demostraci\u00f3n grabado en f\u00e1brica. Esto es lo que se conoce como \"Out of box experience\" que se traduce como \"experiencia inmediata\" y que nos permite comenzar a ver y disfrutar funcionalidades de la placa sin hacer nada mas que conectarla. Si queremos restablecer de f\u00e1brica la micro:bit podemos descargarnos el archivo .hex listo para usar.</p> <p>El programa es v\u00e1lido para todas las versiones de micro:bit aunque, l\u00f3gicamente, si no disponemos de las funcionalidades que nos da la V2 no podremos disfrutarlas.</p> <p>Una vez descargado el programa lo grabamos en nuestra micro:bit y veremos como la pantalla LED comienza a hacer cosas, nos saluda y a partir de aqu\u00ed podemos ir desbloqueando varios juegos siguiendo las instrucciones en pantalla y lo que vamos a ver aqu\u00ed.</p> <p>Una primera cosa que podemos hacer con la V2 es \"dormir a la micro:bit\" manteniendo presionado el bot\u00f3n de reset de la parte posterior hasta que se apague el LED de encendido. Para \"despertarla\" presionamos de nuevo reset.</p> <ul> <li>Presionar lo botones. Median te una flecha nos indica el bot\u00f3n que debemos pulsar para avanzar. Los botones son las entradas m\u00e1s b\u00e1sicas de que dispone micro:bit</li> <li>Ag\u00edtala (Shake it). Cuanto mas agitemos la micro:bit mas LEDs se enceder\u00e1n. Esta funcionalidad est\u00e1 programada con el sensor de movimiento que integra la placa y que se conoce como aceler\u00f3metro porque mide fuerzas. Puede medir la fuerza de sacudida o en que direcci\u00f3n se realiza esta.</li> <li>Tilt: chase the dot. Se trata de atrapar el punto intermitente inclinando la micro:bit.</li> <li>Aplaude (Clap). La micro:bit V2 dispone de micr\u00f3fono y escucha el sonido.</li> <li>Huevo de pascua. A veces se denominan as\u00ed los juegos secretos. Cuando veamos en pantalla un coraz\u00f3n debemos pulsar simultaneamente los botones A y B y se desbloquer\u00e1 el juego de la serpiente.</li> </ul> <p>Podemos reiniciar la microbit en cualquier momento para iniciar de nuevo la demostraci\u00f3n.</p> <p>El c\u00f3digo que descargamos est\u00e1 escrito en C++ por lo que no se cargar\u00e1 en los editores de MakeCode o Python. Ahora bien, se puede  crear un programa propio para esta 'experiencia lista para usar' tanto en MakeCode como en Python.</p> <p>Tanto para enviar a la micro:bit este programa como otro archivo hexadecimal podemos utilizar la herramienta online micro:bit WebUSB hex file flashing tool o micro:bit WebUSB herramienta de flasheo de archivos hexadecimales.</p> <p>En la animaci\u00f3n siguiente vemos esta herramienta en funcionamiento.</p> <p> <p> Herramienta de flasheo</p> <p></p> <p>En la imagen vemos la ventana de la aplicaci\u00f3n traducida.</p> <p> <p> Herramienta de flasheo traducida</p> <p></p>"},{"location":"guias/pyt/","title":"BBC micro:bit con MicroPython","text":"<p>Practicamente todas las explicaciones sobre este tema van a estar basadas en BBC micro:bit MicroPython documentation que desafortunadamente no est\u00e1 es espa\u00f1ol.</p> <p>Uno de los lenguajes que entiende la micro:bit es el Python y la versi\u00f3n que se ejecuta en BBC micro:bit se llama MicroPython.</p> <p>Aunque en principio toda la informaci\u00f3n se va a referir a la versi\u00f3n V2 de micro:bit casi todo ser\u00e1 v\u00e1lido para versiones anteriores, excepto claro lo no implementado en estas.</p> <p>Fundamentalmente vamos a utilizar, para crear los programas, el editor de MicroPython para micro:bit que es muy similar MakeCode. Tambi\u00e9n se puede trabajar con el edit Mu.</p> <p>Python en BBC micro:bit est\u00e1 pensado para que estudiantes de 11 a 14 a\u00f1os (o edades superiores), aprendan fundamentos de la programaci\u00f3n a trav\u00e9s de la codificaci\u00f3n basada en texto.</p> <p> <p> Editor de MicroPython</p> <p></p> <p>Conectamos la micro:bit al ordenador mediante un cable USB.</p> <p>Escribimos el script (programa) en la ventana del editor y hacemos clic en el bot\u00f3n \"Enviar a micro:bit\" o \"Guardar\" para despu\u00e9s transferirlo al micro:bit.</p>"},{"location":"guias/pyt/#partes-del-editor-de-python-microbit","title":"Partes del editor de Python micro:bit","text":"<p>En la gu\u00eda de usuario User guide tenemos la descripci\u00f3n que vamos a resumir aqu\u00ed de las partes que componen el editor.</p> <p> <p> Apartados del editor de MicroPython</p> <p></p>"},{"location":"guias/pyt/#1-referencia","title":"1. Referencia","text":"<p>La secci\u00f3n facilita descubrir lo que Python y micro:bit pueden hacer, como explorar bloques en MakeCode o Scratch.</p> <p>Tamibi\u00e9n sirve para ver f\u00e1cilmente el potencial del hardware que incorpora la micro:bit y que el software de escritura en Python aumenta la creatividad de los alumnos.</p>"},{"location":"guias/pyt/#2-fragmentos-de-codigo","title":"2. Fragmentos de c\u00f3digo","text":"<p>Son fragmentos de c\u00f3digo listos para arrastrar y soltar en el \u00e1rea de programa. Estos fragmentos son totalmente funcionales, ahorran tiempo y ayudan a superar barreras de falta de habilidad con el teclado y recordar de forma precisa la sintaxis.</p> <p> <p> Arrastrar y soltar un fragmento de c\u00f3digo</p> <p></p> <p>Podemos observar como al arrastrar al \u00e1rea de c\u00f3digo la identation (sangria) se realiza de forma autom\u00e1tica para respetar la sintaxis de Python.</p>"},{"location":"guias/pyt/#3-resaltado-de-la-estructura-del-codigo","title":"3. Resaltado de la estructura del c\u00f3digo","text":"<p>Los distintos colores y la l\u00edneas de sangria que se muestran en los programas Python ayudan en las fases de dise\u00f1o, planificaci\u00f3n y prueba de un proyecto. Es f\u00e1cil seguir y entender el flujo de un programa si se mantiene todo en su lugar.</p> <p>En la animaci\u00f3n siguiente se provocan diversos errores de manera intencionada y se muestra la marca del error y la informaci\u00f3n que nos ofrece.</p> <p> <p> Resaltado de la estructura del c\u00f3digo</p> <p></p>"},{"location":"guias/pyt/#4-resaltado-de-errores","title":"4. Resaltado de errores","text":"<p>Los errores forman parte normal de la codificaci\u00f3n. Los s\u00edmbolos circulares junto al n\u00famero de l\u00ednea ayudan a identificar errores y corregirlos antes de enviar el c\u00f3digo a la micro:bit. Se puede pasar el cursor sobre el c\u00edrculo en el margen para que se muestre una explicaci\u00f3n del error. Repetimos aqu\u00ed la animaci\u00f3n previa donde hemos visto esto.</p> <p> <p> Resaltado de errores</p> <p></p>"},{"location":"guias/pyt/#5-autocompletar","title":"5. Autocompletar","text":"<p>El miedo a una pantalla en blanco y no saber qu\u00e9 escribir son dos de las mayores barreras para comenzar la codificaci\u00f3n basada en texto.</p> <p>Para ayudar con esto, a medida que escribe c\u00f3digo, el editor nos hace sugerencias que permiten elegir haciendo clic o presionando la tecla Intro. Esto ahorra tiempo, evita errores tipogr\u00e1ficos y evita tener que recordar de forma precisa una determinada sintaxis.</p> <p>Tambi\u00e9n es otra forma de descubrir qu\u00e9 pueden hacer Python y micro:bit, por ejemplo, al ver las opciones disponibles para mostrar im\u00e1genes ya definidas. Adem\u00e1s, si nos movemos con las flechas del teclado, por las opciones nos ir\u00e1n apareciendo a la derecha las descripciones de cada una de ellas.</p> <p> <p> Autocompletar</p> <p></p>"},{"location":"guias/pyt/#6-simulador","title":"6. Simulador","text":"<p>Permite probar el c\u00f3digo antes de grabarlo en la micro:bit real. Esto ayuda a desarrollar, probar, depurar y evaluar el c\u00f3digo y permite crear proyectos sin disponer fisicamente de la placa.</p> <p> <p> Simulador</p> <p></p>"},{"location":"guias/pyt/#7-ideas-y-api","title":"7. Ideas y API","text":"<p>En la pesta\u00f1a 'Ideas' hay programas completos listos para usar que se pueden modificar para crear los nuestros propios.</p> <p>El men\u00fa API (abreviatura de \"Application Programming Interfaces\" o \"interfaz de programaci\u00f3n de aplicaciones\") nos proporciona una descripci\u00f3n general m\u00e1s detallada de los comandos de MicroPython que se pueden usar con micro:bit. Esto puede ser \u00fatil cuando deseamos entender mejor lo que estamos haciendo en un trozo de c\u00f3digo en particular y qu\u00e9 opciones o argumentos se pueden usar con una funci\u00f3n.</p> <p> <p> Ideas y API</p> <p></p> <p>En la imagen siguiente tenemos un resumen de estos apartados.</p> <p> <p> Partes del editor explicadas en un gr\u00e1fico</p> <p></p>"},{"location":"guias/pyt/#uso-del-simulador","title":"Uso del simulador","text":"<p>La micro:bit que hay en la barra lateral de la derecha es un simulador. Si hacemos clic en reproducir podemos probar nuestro c\u00f3digo. Si el c\u00f3digo utiliza funciones como el aceler\u00f3metro, el sensor de temperatura, el sensor de luz (o cualquier otra funci\u00f3n de micro:bit), se pueden simular las condiciones necesarias para probar la micro:bit con los controles encontramos debajo. Tambi\u00e9n podemos usar la consola serie simulada para interactuar con la micro:bit simulada.</p> <p>En el video Simulator: micro:bit Python Editor enlazado de la documentaci\u00f3n vemos como se usa el simulador.</p>"},{"location":"guias/pyt/#flasheando-la-microbit","title":"Flasheando la micro:bit","text":"<p>Una vez comprobado el funcionamiento del programa tenemos todo listo para probarlo en la micro:bit real simplemente escogiendo 'Enviar a micro:bit'.</p> <p>El video Direct flashing from Python to micro:bit enlazado de la documentaci\u00f3n muestra los siguientes pasos si tenemos un navegador compatible con WebUSB.</p> <p>Si el navegador no soporta webUSB o no conseguimos una configuraci\u00f3n adecuada, como es mi caso utilizando Chomium tenemos que utilizar un m\u00e9todo alternativo para enviar el programa a la micro:bit.</p> <p> <p> Flasheando la micro:bit</p> <p></p>"},{"location":"guias/pyt/#abriendo-un-programa","title":"Abriendo un programa","text":"<p>Para abrir un programa, ya sea porque lo hemos guardado anteriormente o porque es de un tercero, hacemos clic en el bot\u00f3n 'Abrir'. En la ventana de di\u00e1logo que se amuestra seleccionamos el archivo '.hex' o '.py' que queremos abrir y luego hacemos clic en abrir. Alternativamente, podemos arrastrar y soltar un archivo '.hex' o un script '.py' en el editor.</p> <p> <p> Abriendo un programa</p> <p></p>"},{"location":"guias/pyt/#proyectos-configuracion-y-ayuda","title":"Proyectos, configuraci\u00f3n y ayuda","text":"<p>Las tres pesta\u00f1as de la parte inferior izquierda nos dan acceso a estas funcionalidades.</p> <ul> <li>Proyecto. La secci\u00f3n de proyectos, que se encuentra en el men\u00fa de la izquierda, es particularmente \u00fatil si necesitamos agregar archivos de Python adicionales al proyecto. Esto puede ser, por ejemplo, para agregar un m\u00f3dulo para un accesorio o para agregar un c\u00f3digo proporcionado por un tercero.</li> </ul> <p>Al hacer clic en el bot\u00f3n se enumeran todos los archivos .py del proyecto. Originalmente, solo habr\u00e1 un archivo con el nombre main.py que incluye el c\u00f3digo inicial que hemos tecleado en la parte central del editor.</p> <p>Si necesitamos un segundo archivo en el proyecto, podemos elegir 'Crear archivo' y ponerle un nombre, por ejemplo, lo podemos llamar 'ampliar' y se crear\u00e1 un nuevo archivo Python dentro del proyecto.</p> <p>Si por el contrario lo que queremos es abrir un archivo, procedente de un proveedor de accesorios o un tercero, hacemos clic el bot\u00f3n 'Abrir', localizamos el archivo en nuestro ordenador y lo abrimos. Se nos mostrar\u00e1 una ventana '\u00bfCambiar archivos? con una frase que empieza por \"Sustituir c\u00f3digo principal por ...\" y que finaliza con el nombre del archivo seleccionado. A la derecha de esta frase hay un icono que si lo clicamos nos va a permitir escoger entre las opciones de 'Sustituir c\u00f3digo' o 'A\u00f1adir archivo' para a\u00f1adirlo como archivo adicional. Este archivo adicional, que est\u00e1 dentro del proyecto, puede ser referenciado en main.py utilizando la funci\u00f3n 'import'.</p> <p>Si, por otro lado, queremos volver al c\u00f3digo original en alg\u00fan momento, por ejemplo porque se ha realizado un cambio en el programa existente y queremos restablecerlo, podemos usar el bot\u00f3n 'Restablecer proyecto' que est\u00e1 en la parte inferior. Pero cuidado porque esto reemplaza todo el c\u00f3digo, nos lleva de regreso al c\u00f3digo predeterminado y elimina cualquier archivo adicional a\u00f1adido.</p> <p> <p> Proyecto</p> <p></p> <p>El directorio donde se almacenan los proyectos es 'Descargas'.</p> <ul> <li>Configuraci\u00f3n. Se nos abre un men\u00fa donde podemos escoger entre 'Idioma' y 'Configuraci\u00f3n' que muestra una ventana con unas cuantas opciones de configuraci\u00f3n.</li> </ul> <p> <p> Configuraci\u00f3n</p> <p></p> <ul> <li>Ayuda. En esta pesta\u00f1a tenemos acceso a diferentes opciones como 'Ayuda y asistencia' que nos abre una web para consultas, 'Documentaci\u00f3n de MicroPython' que nos dirige a la wiki de referencia citada al principio del apartado, 'Comentarios' un sitio desde enviar nuestros propios comentarios, 'T\u00e9rminos de uso' que nos dirige a la web donde est\u00e1n definidos y 'Acerca de nosotros' que es el t\u00edpico Acerca de... que vemos en la ventana siguiente.</li> </ul> <p> <p> Acerca de nosotros</p> <p></p> <p>Es importante leer 'T\u00e9rminos de uso' donde est\u00e1 descrito todo lo que debemos tener en cuenta cuando se utiliza micro:bit y todo lo relacionado con la marca en los t\u00e9rminos indicados que adem\u00e1s debemos aceptar. Los t\u00e9rminos de uso se dan en 18 puntos.</p>"},{"location":"guias/pyt/#editando-codigo","title":"Editando c\u00f3digo","text":"<p>Para la creaci\u00f3n y edici\u00f3n de nuestros programas utilizaremos la ventana central del editor micro:bit MicroPython.</p> <p>En esta ventana nos ser\u00e1n de gran utilidad las caracter\u00edsticas de autocompletado, detecci\u00f3n de errores y la funcionalidad de los botones deshacer y rehacer que tambi\u00e9n permiten corregir errores.</p> <p> <p> Editando c\u00f3digo</p> <p></p> <p>En la imagen siguiente tenemos enmarcada con l\u00ednea verde discontinua la zona de edici\u00f3n de c\u00f3digo. Esta zona la podemos ampliar minimizando el men\u00fa de la izquierda (1), el men\u00fa de la derecha (4) o ajustando su anchura (2). Los iconos de zoom (3) permiten ampliar y reducir el tama\u00f1o del texto en la ventana y los controles deshacer/rehacer (5) tienen la funcionalidad habitual y permiten cierto nievel de edici\u00f3n.</p> <p> <p> Manejo del editor</p> <p></p>"},{"location":"guias/pyt/#primer-proyecto","title":"Primer proyecto","text":"<p>Para trabajar con Python en micro:bit necesitamos conocer la API de MicroPython que se trata en otro apartado y cuyo original podemos consultar en la webgrafia. Aqu\u00ed vamos a resumir muy brevemente el significado de las tres l\u00edneas de c\u00f3digo que compoenen el programa.</p> <p>Todo lo necesario para poder interactuar con el hardware lo tenemos en el m\u00f3dulo microbit y para facilitar su uso se recomienda iniciar todos los scripts con: <pre><code>from microbit import *\n</code></pre> La pantalla de LEDs se controla a partir del objeto display y sus m\u00e9todos, dos de los cuales usamos en el programa y que trabajan de la forma siguiente: <pre><code>display.clear() #Apaga todos los LEDs\ndisplay.show(0) #Muestra el n\u00famero entre par\u00e9ntesis\n</code></pre> Los n\u00fameros pueden tener mas de una cifra y si queremos mostrarlos como cadena de texto los encerramos entre comillas simples o dobles. L\u00f3gicamente en este caso podemos utilizar otros caracteres que no sean n\u00fameros.</p> <p>El primer proyecto lo tenemos disponible en los enlaces siguientes:</p> <ul> <li>Primer proyecto .hex</li> <li>Primer proyecto .py</li> </ul>"},{"location":"guias/rapida/","title":"Referencia r\u00e1pida","text":"<p>Una breve introducci\u00f3n a cosas \u00fatiles de Python y Linux que nos pueden ayudar con la gu\u00eda de MicroPython.</p>"},{"location":"guias/rapida/#creador-de-python","title":"Creador de Python","text":"<p>Python es un lenguaje de programaci\u00f3n interpretado (no hay que compilar los programas) cuya filosof\u00eda hace hincapi\u00e9 en una sintaxis que favorezca un c\u00f3digo legible.</p> <p>Python fue creado a finales de los ochenta, por el holand\u00e9s Guido van Rossum en el Centro para las Matem\u00e1ticas y la Inform\u00e1tica (CWI, Centrum Wiskunde &amp; Informatica), en los Pa\u00edses Bajos.</p> <p>El nombre del lenguaje proviene de la afici\u00f3n de su creador por los humoristas brit\u00e1nicos Monty Python y no de la serpiente del mismo nombre. Aunque se suele usar un s\u00edmbolo con una serpiente pit\u00f3n para representarlo, de ah\u00ed la normal confusi\u00f3n.</p> <p>Se trata de un lenguaje de programaci\u00f3n multiparadigma o que soporta m\u00e1s de un paradigma de programaci\u00f3n, representando un paradigma un enfoque particular o filosof\u00eda para la construcci\u00f3n del software. Python soporta:</p> <ul> <li>Orientaci\u00f3n a objetos. En la programaci\u00f3n orientada a objetos (OOP) los objetos manipulan los datos de entrada para la obtenci\u00f3n de datos de salida espec\u00edficos, donde cada objeto ofrece una funcionalidad especial. Los objetos permiten la agrupaci\u00f3n en librer\u00edas y usualmente permiten al usuario la creaci\u00f3n de sus propias librer\u00edas. Se basa en t\u00e9cnicas de herencia, cohesi\u00f3n, abstracci\u00f3n, polimorfismo, acoplamiento y encapsulamiento.</li> <li>Programaci\u00f3n imperativa. Es la forma natural de programar un ordenador, es el estilo de programaci\u00f3n que se utiliza en el ensamblador y el m\u00e1s cercano a la m\u00e1quina. Sigue la arquitectura arquitectura cl\u00e1sica de Von Newmann con una memoria donde se almacenan los datos y el programa y una unidad de control que ejecuta las instrucciones del programa, conocida c\u00f3mo contador del programa.</li> <li>Programaci\u00f3n funcional. Es un estilo de programaci\u00f3n cuyo m\u00e9todo b\u00e1sico de computaci\u00f3n es la aplicaci\u00f3n de funciones a sus argumentos.</li> </ul>"},{"location":"guias/rapida/#filosofia-python","title":"Filosof\u00eda Python","text":"<p>Es muy parecida a la filosof\u00eda de Unix. El c\u00f3digo que sigue los principios de Python de legibilidad y transparencia se dice que es \"pythonic\". Por el contrario, el c\u00f3digo opaco u ofuscado es bautizado como \"unpythonic\". Los puntos que describen su filosofia son:</p> <ul> <li>Bello es mejor que feo.</li> <li>Expl\u00edcito es mejor que impl\u00edcito.</li> <li>Simple es mejor que complejo.</li> <li>Complejo es mejor que complicado.</li> <li>Plano es mejor que anidado.</li> <li>Disperso es mejor que denso.</li> <li>La legibilidad cuenta.</li> <li>Los casos especiales no son tan especiales como para quebrantar las reglas.</li> <li>Lo pr\u00e1ctico gana a lo puro.</li> <li>Los errores nunca deber\u00edan dejarse pasar silenciosamente.</li> <li>A menos que hayan sido silenciados expl\u00edcitamente.</li> <li>Frente a la ambig\u00fcedad, rechaza la tentaci\u00f3n de adivinar.</li> <li>Deber\u00eda haber una -y preferiblemente s\u00f3lo una- manera obvia de hacerlo.</li> <li>Aunque esa manera puede no ser obvia al principio a menos que usted sea holand\u00e9s (en clara referencia a su autor).</li> <li>Ahora es mejor que nunca.</li> <li>Aunque nunca es a menudo mejor que ya mismo.</li> <li>Si la implementaci\u00f3n es dif\u00edcil de explicar, es una mala idea.</li> <li>Si la implementaci\u00f3n es f\u00e1cil de explicar, puede que sea una buena idea.</li> <li>Los espacios de nombres (namespaces) son una gran idea \u00a1Hagamos m\u00e1s de esas cosas!</li> </ul> <p>El Zen de Python viene incorporado (en ingl\u00e9s) a partir de la versi\u00f3n 2.1.2 y podemos invocarlo con import this abriendo Python en una terminal en un sistema en el que lo tengamos instalado, l\u00f3gicvamente.</p> <p> <p> Arrastrar y soltar un fragmento de c\u00f3digo</p> <p></p>"},{"location":"guias/rapida/#comentarios","title":"Comentarios","text":"<ul> <li> <p>Una sola linea: Escribiendo el s\u00edmbolo almohadilla (#) delante del comentario.</p> </li> <li> <p>Multilinea: Escribiendo triple comillas dobles (\u201c\u201d\u201d) al principio y al final del comentario.</p> </li> </ul> <p>En los comentarios, pueden incluirse palabras que nos ayuden a identificar adem\u00e1s, el subtipo de comentario:</p> <pre><code># TODO esto es algo por hacer\n# FIXME (arreglarme) esto es algo que debe corregirse\n# XXX esto tambi\u00e9n, es algo que debe corregirse\n</code></pre>"},{"location":"guias/rapida/#identation-o-sangria-en-python","title":"Identation o sangria en Python","text":"<p>La sangr\u00eda se refiere a los espacios al comienzo de una l\u00ednea de c\u00f3digo.</p> <p>Mientras que en otros lenguajes de programaci\u00f3n la sangr\u00eda en el c\u00f3digo es solo para facilitar la lectura, la sangr\u00eda en Python es muy importante ya que se usa para indicar un bloque de c\u00f3digo.</p> <pre><code>if 5 &gt; 2:\n    print(\"Cinco es mayor que 2\")\n</code></pre> <p>Lo siguiente ser\u00eda un error de sintaxis.</p> <pre><code>if 5 &gt; 2:\nprint(\"Cinco es mayor que 2\")\n</code></pre> <p>El n\u00famero de espacios de la identation puede ser cualquiera siempre que al menos sea un espacio. Siempre hay que usar el mismo n\u00famero de espacios en el mismo bloque de c\u00f3digo.</p>"},{"location":"guias/rapida/#tipos-de-permisos-en-linux","title":"Tipos de permisos en Linux","text":"<p>El comando CHMOD nos da la posibilidad de poder cambiar los permisos de los archivos y directorios combinando entre clases y tipos. Hay cuatro clases:</p> <ul> <li>Propietario (u). Creador del archivo o la carpeta</li> <li>Grupo (g). Usuarios que tendr\u00e1n acceso al archivo o carpeta</li> <li>Otros (o). Todos los usuarios</li> <li>Todos (a). Todos los tipos de usuario (propietario, grupo y otros)</li> </ul> <p>Hay tres tipos de permisos:</p> <ul> <li>Lectura ( r). Permite que el usuario vea el archivo pero no puede realizar cambios en el mismo ni copiarlo o borrarlo.</li> <li>Escritura (w). Se permite que los usuarios que acceden al archivo o carpeta puedan realizar sobre el mismo cualquier tipo de edici\u00f3n, copiar, cortar o borrar.</li> <li>Ejecutar (x). Al activar esta opci\u00f3n, la cual viene por defecto deshabilitada, podemos ejecutar archivos.</li> </ul> <p>Hay tres modificadores para la tarea:</p> <ul> <li>+. Concede el permiso</li> <li>-. Deniega el permiso</li> <li>=. Sobreescribe un permiso con el permiso anterior.</li> </ul> <p>En entornos Unix cada permiso tiene el siguiente valor:</p> <ul> <li>Lectura: 4</li> <li>Escritura: 2</li> <li>Ejecuci\u00f3n: 1</li> </ul> <p>Jugando con sumas de estos valores establecemos distintos permisos, por ejemplo, si queremos dar un permiso de escritura usaremos el 6 = 4 + 2 (Lectura + Escritura). Si queremos que pueda ejecutar usaremos el 7 = 4 + 2 + 1 (Lectura + Escritura + Ejecuci\u00f3n).</p> <p>En la tabla tenemos todos los valores posibles.</p> <p> Dec. Bin. Permiso read write exe 0 000 Sin permisos N N N 1 001 Ejecuci\u00f3n N N Y 2 010 Escritura N Y N 3 011 Lectura y escritura N Y Y 4 100 Lectura Y N N 5 101 Lectura y ejecuci\u00f3n Y N Y 6 110 Lectura y escritura Y Y N 7 111 Lectura, escritura y ejecuci\u00f3n Y Y Y <p></p> <p>El procedimiento para establecer el permiso es muy sencillo. Basta con ir a una terminal y ejecutar la siguiente orden:</p> <pre><code>chmod Tipo-permiso Ruta-Archivo\n</code></pre> <p>Ejemplos para modificar permisos en modo terminal:</p> <pre><code>chmod o=rwx * \u2192 Dar permisos de lectura, escritura y ejecuci\u00f3n a los otros usuarios.\n\nchmod go= * \u2192 Quitar todos los permisos a grupo y los otros usuarios.\n\nchmod 666 /Documentos/curso-python/Ejercicios/holamundo.py\n</code></pre> <p>En sistemas Linux con letras veremos algo como lo siguiente:</p> <ul> <li>0 \u2192 ---  \u2192 sin acceso</li> <li>1 \u2192 --x \u2192 ejecuci\u00f3n</li> <li>2 \u2192 -w- \u2192 escritura</li> <li>3 \u2192 -wx \u2192 escritura y ejecuci\u00f3n</li> <li>4 \u2192 r-- \u2192 lectura</li> <li>5 \u2192 r-x \u2192 lectura y ejecuci\u00f3n</li> <li>6 \u2192 rw- \u2192 lectura y escritura</li> <li>7 \u2192 rwx \u2192 lectura, escritura y ejecuci\u00f3n</li> </ul> <p>Por ejemplo: chmod 777. Le damos a los 3 tipos de usuarios permiso de lectura, ejecuci\u00f3n y escritura (hemos sumado4+2+1).  Si queremos dar permisos de lectura y escritura ser\u00eda 4+2 = 6 y si si lo que queremos es s\u00f3lo dar lectura ser\u00eda 4. Si lo que queremos es dar lectura y ejecuci\u00f3n ser\u00eda de sumar 4 + 1 = 5.</p> <p>Diferentes combinaciones t\u00edpicas:</p> <ul> <li>chmod 755. Permiso de lectura y ejecuci\u00f3n (4+1) a todos los usuarios excepto al propietario que lo tiene completo (lectura, escritura, ejecuci\u00f3n 4+2+1).</li> <li>chmod 666. Permisos de lectura y escritura a todos, excepto ejecuci\u00f3n (4+2). Todos pueden acceder al archivo, leer su contenido y modificarlo.</li> <li>chmod 644. Se suele utilizar para no permitr la escritura a nadie que no sea el propietario. El 755 es similar, lectura y ejecuci\u00f3n aunque este es m\u00e1s restrictivo (s\u00f3lo lectura) y (lectura, escritura para propietario).</li> </ul>"},{"location":"programas/lista/","title":"Listado de programas","text":"<p>En la tabla siguiente se establecen todos los enlaces de manera individual y al final aparece un archivo zip con todos los programas de cada categoria.</p> <p>En los enlaces a ficheros, en lugar de hacer clic para abrir el enlace, debemos hacer clic en el bot\u00f3n derecho y escoger 'Guardar enlace como'</p> <p>  MakeCode  MicroBlocks  Python .hex   Python .py Primer proyecto Primer proyecto Primer proyecto Primer proyecto microbit-A01-Hola_Mundo A01-Hola_Mundo.ubp A01-Hola_Mundo-main A01-Hola_Mundo-main Comprimido de MakeCode Comprimido de MicroBlocks Comprimido de Python <p></p> <p></p>"},{"location":"programas/lista/#t","title":"t","text":""}]}